import java.util.InputMismatchException;
import java.math.BigInteger;
import java.io.*;
import java.util.Arrays;

/**
 * Generated by Contest helper plug-in
 * Actual solution is at the bottom
 */
public class Main {
	public static void main(String[] args) {
		try {
			System.setIn(new FileInputStream("input.in"));
			System.setOut(new PrintStream(new FileOutputStream("e.out")));
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
		InputReader in = new StreamInputReader(System.in);
		PrintWriter out = new PrintWriter(System.out);
		run(in, out);
	}

	public static void run(InputReader in, PrintWriter out) {
		Solver solver = new E();
		int testCount = in.readInt();
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		Exit.exit(in, out);
	}
}

abstract class InputReader {
	private boolean finished = false;

	public abstract int read();

	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public long readLong() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		long res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuffer res = new StringBuffer();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}

	private boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

	public void setFinished(boolean finished) {
		this.finished = finished;
	}

	public abstract void close();
}

class StreamInputReader extends InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar, numChars;

	public StreamInputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public void close() {
		try {
			stream.close();
		} catch (IOException ignored) {
		}
	}
}

class Exit {
	private Exit() {
	}

	public static void exit(InputReader in, PrintWriter out) {
		in.setFinished(true);
		in.close();
		out.close();
	}
}

interface Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out);
}

class E implements Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out) {
		long start = in.readLong();
		long maxBet = in.readLong();
		long end = in.readLong();
		double[] p = new double[(int) end];
		for (int i = 1; i < end; i++)
			p[i] = (double)i / end;
		int[] move = new int[(int) end];
		Arrays.fill(move, 1);
		for (int i = 0; i < 1000; i++) {
			for (int j = 1; j < end; j++) {
				for (int k = 1; k <= maxBet && k <= j; k++) {
					double current = move(p, j, k, maxBet);
					if (current > p[j] - 1e-13 && k >= move[j] || current > p[j] + 1e-13) {
						p[j] = current;
						move[j] = k;
					}

				}
			}
		}
		out.printf("Case #%d: %.12f %d\n", testNumber, p[((int) start)], move[((int) start)]);
	}

	private double move(double[] p, int index, long bet, long maxBet) {
		double result = 0;
		double pWin = 1;
		double pLose = 0;
		long loseAmount = 0;
		long startBet = bet;
		while (bet <= maxBet) {
			pLose += pWin / 2;
			pWin /= 2;
			loseAmount += bet;
			result = Math.max(result, pWin * get(p, index - loseAmount) + pLose * get(p, index + startBet));
			bet *= 2;
		}
		return result;
	}

	private double get(double[] p, long l) {
		if (l < 0)
			return 0;
		if (l >= p.length)
			return 1;
		return p[((int) l)];
	}
}

