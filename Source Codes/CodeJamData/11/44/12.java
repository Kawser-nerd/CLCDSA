import java.util.ArrayList;
import java.util.List;
import java.util.InputMismatchException;
import java.math.BigInteger;
import java.util.Iterator;
import java.io.*;
import java.util.Comparator;
import java.util.Arrays;
import java.util.Collection;

/**
 * Generated by Contest helper plug-in
 * Actual solution is at the bottom
 */
public class Main {
	public static void main(String[] args) {
		try {
			System.setIn(new FileInputStream("d.in"));
			System.setOut(new PrintStream(new FileOutputStream("d.out")));
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
		InputReader in = new StreamInputReader(System.in);
		PrintWriter out = new PrintWriter(System.out);
		run(in, out);
	}

	public static void run(InputReader in, PrintWriter out) {
		Solver solver = new TaskD();
		int testCount = in.readInt();
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		Exit.exit(in, out);
	}
}

abstract class InputReader {
	private boolean finished = false;

	public abstract int read();

	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuffer res = new StringBuffer();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}

	private boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

	public void setFinished(boolean finished) {
		this.finished = finished;
	}

	public abstract void close();
}

class StreamInputReader extends InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar, numChars;

	public StreamInputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public void close() {
		try {
			stream.close();
		} catch (IOException ignored) {
		}
	}
}

interface Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out);
}

class Exit {
	private Exit() {
	}

	public static void exit(InputReader in, PrintWriter out) {
		in.setFinished(true);
		in.close();
		out.close();
	}
}

class ArrayUtils {

	public static void fill(int[][] array, int value) {
		for (int[] row : array)
			Arrays.fill(row, value);
	}

	public static void fill(int[][][] array, int value) {
		for (int[][] subArray : array)
			fill(subArray, value);
	}

	}

class TaskD implements Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out) {
		System.err.println(testNumber);
		int planetCount = in.readInt();
		boolean[][] connected = new boolean[planetCount + 1][planetCount + 1];
		int wormholeCount = in.readInt();
		for (int i = 0; i < planetCount; i++)
			connected[i][i] = true;
		for (int i = 0; i < wormholeCount; i++) {
			String[] wormhole = in.readString().split(",");
			int from = Integer.parseInt(wormhole[0]);
			int to = Integer.parseInt(wormhole[1]);
			connected[from][to] = connected[to][from] = true;
		}
		int[] level = new int[planetCount];
		Arrays.fill(level, -1);
		int[] queue = new int[planetCount];
		int size = 1;
		level[0] = 0;
		for (int i = 0; i < size; i++) {
			int vertex = queue[i];
			for (int j = 0; j < planetCount; j++) {
				if (connected[vertex][j] && level[j] == -1) {
					level[j] = level[vertex] + 1;
					queue[size++] = j;
				}
			}
		}
		int[][] bitConnected = new int[planetCount + 1][planetCount / 30 + 1];
		for (int i = 0; i < planetCount; i++) {
			for (int j = 0; j < planetCount; j++) {
				if (connected[i][j])
					bitConnected[i][j / 30] += 1 << (j % 30);
			}
		}
		int[][][] shift = new int[planetCount + 1][planetCount + 1][planetCount];
		ArrayUtils.fill(shift, -1);
		for (int i = 0; i <= planetCount; i++) {
			for (int j = 0; j <= planetCount; j++) {
				if (i != planetCount && (j == planetCount || level[j] != level[i] + 1 || !connected[i][j]) || i == 1 || j == 1)
					continue;
				for (int k = 0; k < planetCount; k++) {
					if (j != planetCount && (level[k] != level[j] + 1 || !connected[k][j]))
						continue;
					if (i == planetCount && j == planetCount && k != 0)
						continue;
					shift[i][j][k] = 0;
					for (int l = 0; l < bitConnected[k].length; l++)
						shift[i][j][k] += Integer.bitCount(bitConnected[k][l] & (~bitConnected[i][l]) & (~bitConnected[j][l]));
				}
			}
		}
		int[][] result = new int[planetCount + 1][planetCount + 1];
		ArrayUtils.fill(result, Integer.MIN_VALUE);
		int answer = go(result, shift, planetCount, planetCount);
		out.println("Case #" + testNumber + ": " + (level[1] - 1) + " " + (answer - level[1]));
	}

	private int go(int[][] result, int[][][] shift, int first, int second) {
		if (result[first][second] != Integer.MIN_VALUE)
			return result[first][second];
		result[first][second] = Integer.MIN_VALUE + 1;
		if (shift[first][second][1] != -1)
			return result[first][second] = 0;
		for (int i = 0; i < result.length - 1; i++) {
			if (i != 1 && shift[first][second][i] != -1)
				result[first][second] = Math.max(result[first][second], go(result, shift, second, i) + shift[first][second][i]);
		}
		return result[first][second];
	}
}

