from itertools import combinations
from scipy.sparse.csgraph import floyd_warshall
ans = float("INF")

n, m = map(int, input().split())

glaph = [[float("INF")] * n for _ in range(n)]
for i in range(n):
    glaph[i][i] = 0

# ???????
# 1??????????? s ?????
s = []
for _ in range(m):
    u, v, l = map(int, input().split())
    if u == 1:
        s.append((v-1, l))
    elif v == 1:
        s.append((u-1, l))
    else:
        glaph[v-1][u-1] = l
        glaph[u-1][v-1] = l


# ????????????1?????????????????????
dist = floyd_warshall(glaph, directed=False)


# s ??2?????dist ?????????????
for u, v in combinations(s,2):
    d = dist[u[0]][v[0]]
    if d != float("INF"):
        # dist ????????
        ans = min(ans, u[1] + v[1] + int(d))

print(-1 if ans == float("INF") else ans)