using System;
using System.Collections.Generic;
using System.Linq;

namespace C {
    class Program {
        static void Main (string[] args) {
            var NK = Console.ReadLine ().Split (' ').Select (c => int.Parse (c));
            var N = NK.First ();
            var K = NK.Take (2).Last ();
            var S = Console.ReadLine ();

            var sol = LimitedSort (N, K, S, string.Concat (S.OrderBy (a => a)), 0, 0, "");
            Console.WriteLine (sol);

            // Console.WriteLine (CountMinDifference ("oder", "deor"));

        }

        /* ????
        ???
        ??????S????????K?????????????T?????
        ???
        1. ???T?i????????????T???????????????C_i????S????
        ?  ?)
            S = program
            T = aro ????????
            i = 4 ????T??????????S????"p,g,m,r*2"(r?2?)
            ????T????????S??????C_4??g
        2. ?????C_i?T?i?????????????????????????????????????K?????????
            ?)
            K = 3
            S = program
            T = aro ????????
            ????C_4 = g ???????
            T = arog***
            ???(***?m,p,r?????)
            ?????T????3????????????????????????
            T = arogrpm
            S = program
            S????????????2????????????????????

         2.a ????????????????????????????????1.?
         2.b ???????C_i????i+1????????1.?
         3. ??????????????
        */

        static string LimitedSort (int N, int K, string source, string sortedRest, int index, int differCount, string target) {
            if (index == N) {
                return target;
            } else {
                //Console.WriteLine (sortedRest);
                foreach (var i in Enumerable.Range (0, sortedRest.Count ())) {
                    var nextRest = sortedRest.Remove (i, 1);
                    var minRestDifferenceCount = CountMinDifference (string.Concat (source.Skip (index + 1)), nextRest);
                    var nextDifferCount = differCount + (source[index] != sortedRest[i] ? 1 : 0);

                    // Console.WriteLine (minRestDifferenceCount);
                    // Console.WriteLine (string.Concat (source.Skip (index + 1)));
                    // Console.WriteLine (nextRest);
                    // Console.WriteLine (nextDifferCount);
                    if (minRestDifferenceCount + nextDifferCount <= K) {
                        return LimitedSort (N, K, source, nextRest, index + 1, nextDifferCount, target + sortedRest[i]);
                    }
                }
                return target;
            }
        }

        /* 2?????????????????????????????????????????????????

        2?????S',T'?????
        S' = aaabbc
        T' = aabccc
        ??????
        ??a?????S'?3??????T'?2????????
        ??b?????T'?2??????S'?1????????
        ??????a~z?????????S'?T'??????????????????????
        ????S'?T'????????????????????????????????????M?????????????

        M = min(S'?a??, T'?a??)
        + min(S'?b??, T'?b??)
        ~~
        + min(S'?y??, T'?y??)
        + min(S'?z??, T'?z??)

        ????S'?T'??????????????????????????????????????????????????????
        S'???? - M        

        */
        static int CountMinDifference (string source, string target) {
            var a2z = Enumerable.Range ('a', 'z' - 'a' + 1).Select (i => (char) i);
            var minSameCount = a2z.Select (c => Math.Min (CountChar (source, c), CountChar (target, c))).Sum ();
            return source.Count () - minSameCount;
        }
        static int CountChar (string source, char c) {
            return source.Where (x => x == c).Count ();
        }
    }
}