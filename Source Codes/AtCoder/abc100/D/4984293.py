#!/usr/bin/env python3
import sys
import itertools

def solve(N: int, M: int, x: "List[int]", y: "List[int]", z: "List[int]"):
    coef = [1,-1]
    cand = itertools.product(coef,repeat=3)
    sumMax = 0
    for can in cand:
        combined = []
        for i in range(N):
            combined.append(can[0] * x[i] + can[1] * y[i] + can[2] * z[i])
        combined.sort()
        s = sum(combined[:M])
        sumMax = max(sumMax,abs(s))
    print(sumMax)
    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    x = [int()] * (N)  # type: "List[int]" 
    y = [int()] * (N)  # type: "List[int]" 
    z = [int()] * (N)  # type: "List[int]" 
    for i in range(N):
        x[i] = int(next(tokens))
        y[i] = int(next(tokens))
        z[i] = int(next(tokens))
    solve(N, M, x, y, z)

if __name__ == '__main__':
    main()