using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO; //for StreamReader & Writer

namespace GoogleCodeJam
{
    class GoogleCodeJam_2013_QR_C
    {
        static List<string> sq;
        static List<string> sqrt;

        static void Main(string[] args)
        {
            TextReader readerGen = new StreamReader("../../input_C_generatedPals.txt");
            int numPals = 41551;  //last one having 99 digits
            string[] pals = new string[numPals];
            for (int p = 0; p < numPals; p++)
            {
                pals[p] = readerGen.ReadLine();
            }
            readerGen.Close();

            TextReader reader = new StreamReader("../../input_C_big.txt");
            TextWriter writer = new StreamWriter("../../output_C_big.txt");

            int T = int.Parse(reader.ReadLine());

            //Generated numbers
            //1 - 1 - 1
            //2 - 4 - 2
            //3 - 9 - 3
            //4 - 121 - 11
            //5 - 484 - 22
            //6 - 10201 - 101
            //7 - 12321 - 111
            //8 - 14641 - 121
            //9 - 40804 - 202
            //10 - 44944 - 212
            //11 - 1002001 - 1001
            //12 - 1234321 - 1111
            //13 - 4008004 - 2002
            //14 - 100020001 - 10001
            //15 - 102030201 - 10101
            //16 - 104060401 - 10201
            //17 - 121242121 - 11011
            //18 - 123454321 - 11111
            //19 - 125686521 - 11211
            //20 - 400080004 - 20002
            //21 - 404090404 - 20102
            //22 - 10000200001 - 100001
            //23 - 10221412201 - 101101
            //24 - 12102420121 - 110011
            //25 - 12345654321 - 111111
            //26 - 40000800004 - 200002
            //27 - 1000002000001 - 1000001
            //28 - 1002003002001 - 1001001
            //29 - 1004006004001 - 1002001
            //30 - 1020304030201 - 1010101
            //31 - 1022325232201 - 1011101
            //32 - 1024348434201 - 1012101
            //33 - 1210024200121 - 1100011
            //34 - 1212225222121 - 1101011
            //35 - 1214428244121 - 1102011
            //36 - 1232346432321 - 1110111
            //37 - 1234567654321 - 1111111
            //38 - 4000008000004 - 2000002
            //39 - 4004009004004 - 2001002

            //40 - 100000020000001 - 10000001
            //41 - 100220141022001 - 10011001
            //42 - 102012040210201 - 10100101
            //43 - 102234363432201 - 10111101
            //44 - 121000242000121 - 11000011
            //45 - 121242363242121 - 11011011
            //46 - 123212464212321 - 11100111
            //47 - 123456787654321 - 11111111
            //48 - 400000080000004 - 20000002

            //49 - 10000000200000001 - 100000001
            //50 - 10002000300020001 - 100010001
            //51 - 10004000600040001 - 100020001
            //52 - 10020210401202001 - 100101001
            //53 - 10022212521222001 - 100111001
            //54 - 10024214841242001 - 100121001
            //55 - 10201020402010201 - 101000101
            //56 - 10203040504030201 - 101010101
            //57 - 10205060806050201 - 101020101
            //58 - 10221432623412201 - 101101101
            //59 - 10223454745432201 - 101111101
            //60 - 12100002420000121 - 110000011
            //61 - 12102202520220121 - 110010011
            //62 - 12104402820440121 - 110020011
            //63 - 12122232623222121 - 110101011
            //64 - 12124434743442121 - 110111011
            //65 - 12321024642012321 - 111000111
            //66 - 12323244744232321 - 111010111
            //67 - 12343456865434321 - 111101111
            //68 - 12345678987654321 - 111111111
            //69 - 40000000800000004 - 200000002
            //70 - 40004000900040004 - 200010002

            //71 - 1000000002000000001 - 1000000001
            //72 - 1000220014100220001 - 1000110001
            //73 - 1002003004003002001 - 1001001001
            //74 - 1002223236323222001 - 1001111001
            //75 - 1020100204020010201 - 1010000101
            //76 - 1020322416142230201 - 1010110101
            //77 - 1022123226223212201 - 1011001101
            //78 - 1022345658565432201 - 1011111101
            //79 - 1210000024200000121 - 1100000011
            //80 - 1210242036302420121 - 1100110011
            //81 - 1212203226223022121 - 1101001011
            //82 - 1212445458545442121 - 1101111011
            //83 - 1232100246420012321 - 1110000111
            //84 - 1232344458544432321 - 1110110111
            //85 - 1234323468643234321 - 1111001111
            //86 - 4000000008000000004 - 2000000002
            //87 - 100000000020000000001 - 10000000001
            //88 - 100002000030000200001 - 10000100001
            //89 - 100004000060000400001 - 10000200001
            //90 - 100020201040102020001 - 10001010001
            //91 - 100022201252102220001 - 10001110001
            //92 - 100024201484102420001 - 10001210001
            //93 - 100200120040021002001 - 10010001001
            //94 - 100202122050221202001 - 10010101001
            //95 - 100204124080421402001 - 10010201001
            //96 - 100220341262143022001 - 10011011001
            //97 - 100222343474343222001 - 10011111001
            //98 - 102010002040200010201 - 10100000101
            //99 - 102012022050220210201 - 10100100101
            //100 - 102014042080240410201 - 10100200101
            //101 - 102030405060504030201 - 10101010101
            //102 - 102032425272524230201 - 10101110101
            //103 - 102212122262221212201 - 10110001101
            //104 - 102214144272441412201 - 10110101101
            //105 - 102232545484545232201 - 10111011101
            //106 - 102234567696765432201 - 10111111101
            //107 - 121000000242000000121 - 11000000011
            //108 - 121002200252002200121 - 11000100011
            //109 - 121004400282004400121 - 11000200011
            //110 - 121022221262122220121 - 11001010011
            //111 - 121024421474124420121 - 11001110011
            //112 - 121220122262221022121 - 11010001011
            //113 - 121222324272423222121 - 11010101011
            //114 - 121242363484363242121 - 11011011011
            //115 - 121244565696565442121 - 11011111011
            //116 - 123210002464200012321 - 11100000111
            //117 - 123212222474222212321 - 11100100111
            //118 - 123232425484524232321 - 11101010111
            //119 - 123234645696546432321 - 11101110111
            //120 - 123432124686421234321 - 11110001111
            //121 - 123434346696643434321 - 11110101111
            //122 - 400000000080000000004 - 20000000002
            //123 - 400004000090000400004 - 20000100002
            //124 - 10000000000200000000001 - 100000000001
            //125 - 10000220001410002200001 - 100001100001
            //126 - 10002002100400120020001 - 100010010001
            //127 - 10002222123632122220001 - 100011110001
            //128 - 10020010200400201002001 - 100100001001
            //129 - 10020230421612403202001 - 100101101001
            //130 - 10022014302620341022001 - 100110011001
            //131 - 10022234545854543222001 - 100111111001
            //132 - 10201000020402000010201 - 101000000101
            //133 - 10201222221612222210201 - 101001100101
            //134 - 10203022140604122030201 - 101010010101
            //135 - 10203244363836344230201 - 101011110101
            //136 - 10221210222622201212201 - 101100001101
            //137 - 10221432643834623412201 - 101101101101
            //138 - 10223234344844343232201 - 101110011101
            //139 - 12100000002420000000121 - 110000000011
            //140 - 12100242003630024200121 - 110001100011
            //141 - 12102202302620320220121 - 110010010011
            //142 - 12102444325852344420121 - 110011110011
            //143 - 12122010222622201022121 - 110100001011
            //144 - 12122252443834425222121 - 110101101011
            //145 - 12124214524842541242121 - 110110011011
            //146 - 12321000024642000012321 - 111000000111
            //147 - 12321244225852244212321 - 111001100111
            //148 - 12323222344844322232321 - 111010010111
            //149 - 12343210246864201234321 - 111100001111
            //150 - 40000000000800000000004 - 200000000002

            //41551 - 400000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000004


            sq = new List<string>();
            sqrt = new List<string>();

            for (int tc = 1; tc <= T; tc++)
            {
                string[] s = reader.ReadLine().Split();
                //long a = long.Parse(s[0]);
                //long b = long.Parse(s[1]);
                string a = s[0];
                string b = s[1];

                int cnt = 0;
                for (int i = 0; i < pals.Length; i++)
                    if ( (pals[i].Length > a.Length ||
                         (pals[i].Length == a.Length && string.Compare(pals[i],a) >= 0))
                      && (pals[i].Length < b.Length ||
                         (pals[i].Length == b.Length && string.Compare(pals[i], b) <= 0))
                        )
                        cnt++;
                    //if (sq[i] >= a && sq[i] <= b) cnt++;

                Console.WriteLine("Case #" + tc + ": " + cnt);
                writer.WriteLine("Case #" + tc + ": " + cnt);
            }

            reader.Close();
            writer.Close();
        }

        //***** The following code was used to Generate Palindromes that
        //      meet the criteria, up to 10^100.
        static private List<string> GetPals()
        {
            List<string> pals = new List<string>();
            pals.Add("1"); pals.Add("2"); pals.Add("3");
            sq.Add("1"); sqrt.Add("1");
            Console.WriteLine(sq.Count + " - " + sq[0] + " - " + sqrt[0]);
            sq.Add("4"); sqrt.Add("2");
            Console.WriteLine(sq.Count + " - " + sq[1] + " - " + sqrt[1]);
            sq.Add("9"); sqrt.Add("3");
            Console.WriteLine(sq.Count + " - " + sq[2] + " - " + sqrt[2]);


            int[] d = new int[51];
            for (int digLen = 2; digLen <= 50; digLen++)
            {
                int half = digLen / 2;
                int extra = digLen % 2;

                for (int f = 1; f <= 2; f++)
                {
                    int i = 0;
                    d[i] = f;
                    for (i = 1; i < digLen / 2 + extra; i++)
                        d[i] = 0;

                    for (i = digLen / 2 + extra; i < digLen; i++)
                        d[i] = d[digLen - i - 1];

                    while (d[0] == f)
                    {
                        if (extra == 1)
                        {
                            for (int j = 0; j <= 2; j++)
                            {
                                d[digLen / 2] = j;
                                StringBuilder sb = new StringBuilder();
                                for (i = 0; i < digLen; i++)
                                    sb.Append(d[i]);
                                string pal = sb.ToString();

                                string prodSt = multBig(pal, pal);
                                if (IsPal(prodSt)) 
                                {
                                    sqrt.Add(pal);
                                    sq.Add(prodSt);
                                    Console.WriteLine(sq.Count + " - " + digLen + " - " + prodSt + " - " + pal);
                                }
                            }
                        }
                        else
                        {
                            StringBuilder sb = new StringBuilder();
                            for (i = 0; i < digLen; i++)
                                sb.Append(d[i]);
                            string pal = sb.ToString();

                            string prodSt = multBig(pal, pal);
                            if (IsPal(prodSt)) 
                            {
                                sqrt.Add(pal);
                                sq.Add(prodSt);
                                Console.WriteLine(sq.Count + " - " + digLen + " - " + prodSt + " - " + pal);

                            }
                        }

                        d[digLen / 2 - 1]++;
                        for (i = digLen / 2 -1; i > 0; i--)
                            if (d[i] > 1)
                            {
                                d[i - 1]++;
                                d[i] = 0;
                            }

                        for (i = digLen / 2 + extra; i < digLen; i++)
                            d[i] = d[digLen - i - 1];

                        if (f == 2) f = 3; //only 1st pass needed
                    }
                        
                }
            }
            return pals;
        }

        static private bool IsPal(string word)
        {
            int n = word.Length;
            for (int i = 0; i < n / 2; i++)
                if (word[i] != word[n - i - 1]) return false;
            return true;
        }

        static private bool IsSquareOfPal(long num)
        {
            double d = Math.Sqrt(num);
            long x = (long)(d + 1e-9);
            return (x * x == num && IsPal(x.ToString() ));
        }

        static private string multBig(string x, string y)
        {
            int xl = x.Length;
            int[] a = new int[xl];
            for (int i = 0; i < xl; i++) a[i] = x[xl - i - 1] - '0';
            int yl = y.Length;
            int[] b = new int[yl];
            for (int i = 0; i < yl; i++) b[i] = y[yl - i - 1] - '0';

            int[] prod = new int[xl + yl];
            int ind = 0;
            for (int i = 0; i < yl; i++)
            {
                int carry = 0;
                for (int j = 0; j < xl; j++)
                {
                    ind = i + j;
                    prod[ind] += b[i] * a[j] + carry;
                    carry = prod[ind] / 10;
                    prod[ind] -= carry * 10;
                }
                if (carry > 0) prod[++ind] = carry;
            }
            StringBuilder sb = new StringBuilder();
            for (int i = ind; i >= 0; i--)
                sb.Append(prod[i]);
            return sb.ToString();
        }
    }
}
