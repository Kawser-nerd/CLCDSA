#!/usr/bin/env python3
import sys

MOD = 998244353  # type: int

def solve(N: int, A: int, B: int, K: int):
    N_max = 3*10**5
# ?????
    g1 = [1, 1]
# ??????
    g2 = [1, 1]
# ?????????????
    inv = [0, 1]

    for i in range(2, N_max+1):
        g1.append((g1[-1] * i) % MOD)
        inv.append((-inv[MOD % i] * (MOD//i)) % MOD)
        g2.append((g2[-1] * inv[-1]) % MOD)

    ans = 0
    for x in range(N+1):
        if (K-A*x)%B==0:
            y = (K-A*x)//B
            if y<0 or y>N:
                continue
            ans += g1[N]*g2[x]*g2[N-x] * g1[N]*g2[y]*g2[N-y]
            ans %= MOD
    print(ans)

    return


# Generated by 1.1.3 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = int(next(tokens))  # type: int
    B = int(next(tokens))  # type: int
    K = int(next(tokens))  # type: int
    solve(N, A, B, K)

if __name__ == '__main__':
    main()