#!/usr/bin/env python3
import sys
import math
MOD = 1000000007  # type: int


def factorization(n: int):
    if n == 1:
        return []
    factors = None
    for i in range(2, math.ceil(math.sqrt(n))+1):
        if n % i == 0:
            factors = [i] + factorization(n // i)
            break
    if factors == None:
        return [n]
    else:
        return factors


def comb(i: int, j: int):
    if j > i-j:
        return comb(i, i-j)
    mul = 1
    for k in range(i-j+1, i+1):
        mul *= k
    for k in range(2, j+1):
        mul //= k
    #print(f"{i}C{j} = {mul}")
    return mul


def solve(N: int, M: int):
    factor = factorization(M)
    factorDict = {}
    for f in factor:
        if f not in factorDict:
            factorDict[f] = 0
        factorDict[f] += 1
    mul = 1
    for k in factorDict:
        mul = (mul*comb(factorDict[k]+N-1, factorDict[k])) % MOD
    print(mul)
    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    solve(N, M)


if __name__ == '__main__':
    main()