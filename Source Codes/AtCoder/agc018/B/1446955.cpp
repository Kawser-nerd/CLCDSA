/*
doge
???????????????????
??????????????????????????
??????????????????????????
??????????????????????????
??????????????????????????
??????????????????????????
???????????????????????????
???????????????????????????
????????????????????????????
????????????????????????????
???????????????????????????

Mr Mr has arrived

*/
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdio>
#include <numeric>
#include <cstring>
#include <ctime>
#include <cstdlib>
#include <set>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <list>
#include <cmath>
#include <bitset>
#include <cassert>
#include <queue>
#include <stack>
#include <deque>
#include <cassert>
#include <iomanip>
#include <random>

using namespace std;

#define ll long long
#define ld long double
#define null NULL

const int N = 333;

queue<int> q[N];

int a[N][N];

bool mark[N];

int n, m;

inline bool check(int x) {
	memset(mark, 0, sizeof(mark));
	for (int i = 1; i <= n; ++i) {
		while (!q[i].empty()) {
			q[i].pop();
		}
		for (int j = 1; j <= m; ++j) {
			q[i].push(a[i][j]);
		}
	}
	bool incorrect = true;
	while (incorrect) {

		vector<int> cnt(m + 1);

		for (int i = 1; i <= n; ++i) {
			if (!q[i].empty()) {
				++cnt[q[i].front()];
			}
		}

		incorrect = false;

		for (int sport = 1; sport <= m; ++sport) {
			if (cnt[sport] > x) {
				mark[sport] = true;
				incorrect = true;
			}
		}

		for (int i = 1; i <= n; ++i) {
			while (!q[i].empty() && mark[q[i].front()]) {
				q[i].pop();
			}
		}
	}
	for (int i = 1; i <= n; ++i) {
		if (!q[i].empty()) {
			return true;
		}
	}
	return false;
}


int main() {
	scanf("%d %d", &n, &m);
	for (int i = 1; i <= n; ++i) {
		for (int j = 1; j <= m; ++j) {
			scanf("%d", &a[i][j]);
		}
	}
	int l = 0, r = n;
	while (r - l > 1) {
		int mid = (l + r) >> 1;
		if (check(mid)) {
			r = mid;
		} else {
			l = mid;
		}
	}
	printf("%d\n", r);
	return 0;
}