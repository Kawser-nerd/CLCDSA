#!/usr/bin/env python3
import sys


def euclid_gcd(a: int, b: int):
    if a < b:
        return euclid_gcd(b, a)
    r = a % b
    while r != 0:
        a = b
        b = r
        r = a % b
    return b


def solve(N: int, A: "List[int]"):
    lastGCD = A[0]
    for i in range(1, N):
        lastGCD = euclid_gcd(lastGCD, A[i])
    print(lastGCD)
    return


# Generated by 1.1.3 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    A = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, A)


if __name__ == '__main__':
    main()