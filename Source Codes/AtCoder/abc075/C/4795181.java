import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int m = sc.nextInt();
        ArrayList<DJSet> ds = new ArrayList<DJSet>();
        for(int i = 0; i < m; i++) ds.add(new DJSet(n));
        for(int i = 0; i < m; i++){
            int a = sc.nextInt()-1;
            int b = sc.nextInt()-1;
            for (int j = 0; j < m; j++) {
                if(i != j) ds.get(j).union(a, b);
            }
        }
        int ans = 0;
        for (int i = 0; i < m; i++) {
            if(ds.get(i).countSet() != 1) ans++;
        }

        System.out.println(ans);
        sc.close();
    }

}

class DJSet {
    /**
     * ?????????????
     * ?????????????????
     * ?????????????????????
     */
    public int[] upper;

    /**
     * ????????
     * @param n ????????
     */
    public DJSet(int n) {
        upper = new int[n];
        Arrays.fill(upper, -1);
    }

    /**
     * ??x????????root?????
     * root????????????root???????????
     * @param x ??x
     * @return ??x????????root
     */
    public int root(int x) {
        return upper[x] < 0 ? x : (upper[x] = root(upper[x]));
    }

    /**
     * ??x???y???????????
     * @param x ??x
     * @param y ??y
     * @return ??x???y?????????true????????false????
     */
    public boolean same(int x, int y) {
        return root(x) == root(y);
    }

    /**
     * ??x???y????????????????
     * ?????????root??????????root??????????
     * @param x ??x
     * @param y ??y
     * @return ??x???y?????????????????true??????????????????false????
     */
    public boolean union(int x, int y) {
        x = root(x);
        y = root(y);
        if (x != y) {
            if (upper[y] < upper[x]) {
                int t = x;
                x = y;
                y = t;
            }
            upper[x] += upper[y];
            upper[y] = x;
        }
        return x != y;
    }

    /**
     * ?????????
     * @return ????
     */
    public int countSet() {
        int c = 0;
        for (int u : upper) {
            if (u < 0)
                c++;
        }
        return c;
    }

    /**
     * ???????????????????
     * @param x ???
     * @return ??????????????
     */
    public int countElement(int x) {
        return upper[root(x)] * -1;
    }
}