# -*- coding: utf-8 -*-
import heapq

'''
???mod K?????????????????or10?????????????????????
1???????f?1????10?????f???????
'''

K = int(input())
adj = [dict() for i in range(K)]
for i in range(1,K):
    adj[i] = dict()
    adj[i][(i+1)%K] = 1
    adj[i][(i*10)%K] = 0

# print(adj)
# ???????????????
# ???????
def dijkstra(adj):
    '''
    :param adj: adj[i][j] distance between i and j
    adj = list(dict()) #???????
    :return: d[u]
    '''
    q = []  # ??????????
    d = dict()  # ????v????????
    p = dict()  # ???????
    n = len(adj)  # ?????

    for i in range(n):
        d[i] = float('inf')
    # ???
    start_id = 1
    d[start_id] = 0
    heapq.heappush(q, (0,start_id)) #(d[id], id)
    S = set()

    while len(S) != n:
        # print(q)
        dist, node_id = heapq.heappop(q)
        S.add(node_id)
        for u, c in adj[node_id].items(): #?????
            # print(u,c)
            if c + d[node_id] < d[u]:
                d[u] = c + d[node_id]
                heapq.heappush(q, (d[u], u))
    return d



d = dijkstra(adj)
print(d[0]+1)