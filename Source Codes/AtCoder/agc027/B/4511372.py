#!/usr/bin/env python3
import sys
from itertools import accumulate


def solve(N: int, X: int, x: "List[int]"):
    coeff = [2*i+1 if i >= 3 else 5 for i in range(N+1)]
    acc = list(accumulate([0]+x))
    ans = 10**32
    for i in range(1, N+1):
        tmp = 0
        p, q = N//i, N % i
        for j in range(p):
            tmp += coeff[p-j]*(acc[q+i*(j+1)]-acc[q+i*j])
        if q > 0:
            tmp += coeff[p+1]*acc[q]
        tmp += N*X+i*X

        ans = min(ans, tmp)
    print(ans)
    return


# Generated by 1.1.3 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    X = int(next(tokens))  # type: int
    x = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, X, x)

if __name__ == '__main__':
    main()