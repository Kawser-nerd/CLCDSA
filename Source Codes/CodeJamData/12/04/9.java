import java.io.*;import java.util.*;class Mirrors {	static class Direction {		int x;		int y;		Direction(int a, int b){			x = a;			y = b;		}	}	static class Point {		double x;		double y;		Point(double a, double b){			x = a;			y = b;		}	}	static class Cell {		int x;		int y;		Cell(int a, int b){			x = a;			y = b;		}	}	public static void main(String [] args) throws Exception{		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));		int T = Integer.parseInt(in.readLine());		for(int i = 0; i < T; i++){			int ans = 0;			StringTokenizer st = new StringTokenizer(in.readLine());			int H = Integer.parseInt(st.nextToken());			int W = Integer.parseInt(st.nextToken());			int D = Integer.parseInt(st.nextToken());			char[][] map = new char[H][W];			Cell startcel = null;			for(int j = 0; j < H; j++){				String s = in.readLine();				for(int k = 0; k < s.length(); k++){					map[j][k] = s.charAt(k);					if(s.charAt(k)=='X'){						startcel = new Cell(j,k);						map[j][k]='.';					}				}			}			//list of diagonal directions 			//hit corner at end			ArrayList<Direction> directions = new ArrayList<Direction>();			for(int j = 0; j <= D/2; j++){				for(int k = 0; k <= D/2; k++){					if(Math.sqrt((0.5+j)*(0.5+j)+(0.5+k)*(0.5+k))<=D/2+0.0001){						int x = 1+2*j;						int y = 1+2*k;						boolean exists = false;						for(int l = 0; l < directions.size(); l++){							int x2 = directions.get(l).x;							int y2 = directions.get(l).y;							if((double)x/y<=(double)x2/y2 + 0.0001 &&								(double)x/y>=(double)x2/y2 - 0.0001){								exists = true;							}						}						if(!exists){							directions.add(new Direction(x,y));							directions.add(new Direction(x,-y));							directions.add(new Direction(-x,y));							directions.add(new Direction(-x,-y));						}					}				}			}			//diagonal direction doesn't hit corner			for(int j = 1; j <= D; j++){				for(int k = 1; k <= D; k++){					if(Math.sqrt(j*j+k*k)<=D+0.0001){						int x = j;						int y = k;						boolean exists = false;						for(int l = 0; l < directions.size(); l++){							int x2 = directions.get(l).x;							int y2 = directions.get(l).y;							if((double)x/y<=(double)x2/y2 + 0.0001 &&								(double)x/y>=(double)x2/y2 - 0.0001){								exists = true;							}						}						if(!exists){							directions.add(new Direction(x,y));							directions.add(new Direction(x,-y));							directions.add(new Direction(-x,y));							directions.add(new Direction(-x,-y));						}					}				}			}						//straight directions			directions.add(new Direction(0,1));			directions.add(new Direction(0,-1));			directions.add(new Direction(1,0));			directions.add(new Direction(-1,0));		/*				for(int j = 0; j < directions.size(); j++){				System.out.println(directions.get(j).x + " " + directions.get(j).y);			}*/			//for each direction see if it hits X again			for(Direction d : directions){				Point p = new Point(0.5,0.5);				double traveled = 0;				Direction dir = new Direction(d.x,d.y);				Cell cell = new Cell(startcel.x,startcel.y);				while (traveled<=D){										//assume next cell is vertical from this one					double ydir = 1 - p.y;					if(dir.y<0) ydir = -p.y;					if(dir.y==0) ydir = 0;					double xdir = (ydir==0) ? ((dir.x>0) ? 1 : -1 ): dir.x*ydir/dir.y;					//System.out.println(traveled + " (" + cell.x + ", " + cell.y + ") " + xdir + " " + ydir + " " + p.x + " " + p.y);					//check termination					if(cell.x==startcel.x&&cell.y==startcel.y&&(p.x!=0.5||p.y!=0.5)){						double x1 = 0.5;						double y1 = 0.5;						double x2 = p.x;						double y2 = p.y;						double x3 = p.x + xdir;						double y3 = p.y + ydir;						double area = x1*(y2-y3) + x2*(y3 - y1) + x3*(y1 - y2);						if(area < 0.0001 && area > -0.0001){ //colinear points							traveled += Math.sqrt((p.x-0.5)*(p.x-0.5) + (p.y-0.5)*(p.y-0.5));							p.x = 0.5;							p.y = 0.5;							break;						}					}					//corner case					if((p.x+xdir>0.9999&&p.x+xdir<1.0001)&&						(p.y+ydir>0.9999&&p.y+ydir<1.0001)){ //bottom right						traveled += Math.sqrt(xdir*xdir + ydir*ydir);						if(map[cell.x+1][cell.y+1]=='.'){							cell.x++;							cell.y++;							p.x = 0;							p.y = 0;						} else if(map[cell.x][cell.y+1]=='.'&&									map[cell.x+1][cell.y]=='.'){							traveled = 99999;							break;						} else if(map[cell.x][cell.y+1]=='#'&&									map[cell.x+1][cell.y]=='.'){							dir.x = -dir.x;							cell.x++;							p.x = 1;							p.y = 0;						} else if(map[cell.x][cell.y+1]=='.'&&									map[cell.x+1][cell.y]=='#'){							dir.y = -dir.y;							cell.y++;							p.x = 0;							p.y = 1;						} else if(map[cell.x][cell.y+1]=='#'&&									map[cell.x+1][cell.y]=='#'){							dir.y = -dir.y;							dir.x = -dir.x;							p.x = 1;							p.y = 1;						} else {							System.err.println("error br");							System.exit(-1);						}					} else if((p.x+xdir>-0.0001&&p.x+xdir<0.0001)&&							(p.y+ydir>0.9999&&p.y+ydir<1.0001)){ //bottom left						traveled += Math.sqrt(xdir*xdir + ydir*ydir);						if(map[cell.x+1][cell.y-1]=='.'){							cell.y--;							cell.x++;							p.x = 1;							p.y = 0;						} else if(map[cell.x][cell.y-1]=='.'&&									map[cell.x+1][cell.y]=='.'){							traveled = 99999;							break;						} else if(map[cell.x][cell.y-1]=='#'&&									map[cell.x+1][cell.y]=='.'){							dir.x = -dir.x;							cell.x++;							p.x = 0;							p.y = 0;						} else if(map[cell.x][cell.y-1]=='.'&&									map[cell.x+1][cell.y]=='#'){							dir.y = -dir.y;							cell.y--;							p.x = 1;							p.y = 1;						} else if(map[cell.x][cell.y-1]=='#'&&									map[cell.x+1][cell.y]=='#'){							dir.y = -dir.y;							dir.x = -dir.x;							p.x = 0;							p.y = 1;						} else {							System.err.println("error bl");							System.exit(-1);						}					} else if((p.x+xdir>-0.0001&&p.x+xdir<0.0001)&&							(p.y+ydir>-0.0001&&p.y+ydir<0.0001)){ //top left						traveled += Math.sqrt(xdir*xdir + ydir*ydir);						if(map[cell.x-1][cell.y-1]=='.'){							cell.y--;							cell.x--;							p.x = 1;							p.y = 1;						} else if(map[cell.x-1][cell.y]=='.'&&									map[cell.x][cell.y-1]=='.'){							traveled = 99999;							break;						} else if(map[cell.x-1][cell.y]=='.'&&									map[cell.x][cell.y-1]=='#'){							dir.x = -dir.x;							cell.x--;							p.x = 0;							p.y = 1;						} else if(map[cell.x-1][cell.y]=='#'&&									map[cell.x][cell.y-1]=='.'){							dir.y = -dir.y;							cell.y--;							p.x = 1;							p.y = 0;						} else if(map[cell.x-1][cell.y]=='#'&&									map[cell.x][cell.y-1]=='#'){							dir.y = -dir.y;							dir.x = -dir.x;							p.x = 0;							p.y = 0;						} else {							System.err.println("error tl");							System.exit(-1);						}					} else if((p.x+xdir>0.9999&&p.x+xdir<1.0001)&&							(p.y+ydir>-0.0001&&p.y+ydir<0.0001)){ //top right						traveled += Math.sqrt(xdir*xdir + ydir*ydir);						if(map[cell.x-1][cell.y+1]=='.'){							cell.y++;							cell.x--;							p.x = 0;							p.y = 1;						} else if(map[cell.x][cell.y+1]=='.'&&									map[cell.x-1][cell.y]=='.'){							traveled = 99999;							break;						} else if(map[cell.x][cell.y+1]=='#'&&									map[cell.x-1][cell.y]=='.'){							dir.x = -dir.x;							cell.x--;							p.x = 1;							p.y = 1;						} else if(map[cell.x][cell.y+1]=='.'&&									map[cell.x-1][cell.y]=='#'){							dir.y = -dir.y;							cell.y++;							p.x = 0;							p.y = 0;						} else if(map[cell.x][cell.y+1]=='#'&&									map[cell.x-1][cell.y]=='#'){							dir.y = -dir.y;							dir.x = -dir.x;							p.x = 1;							p.y = 0;						} else {							System.err.println("error tr");							System.exit(-1);						}					} else if(p.x + xdir>0.9999){						xdir = 1 - p.x;						ydir = dir.y*xdir/dir.x;						traveled += Math.sqrt(xdir*xdir + ydir*ydir);						if(map[cell.x][cell.y+1]=='#'){							dir.x = -dir.x;							p.x = 1;							p.y = p.y + ydir;						} else {							cell.y++;							p.x = 0;							p.y = p.y + ydir;						}					} else if(p.x + xdir<0.0001){ //go to next x cell						xdir = -p.x;						ydir = dir.y*xdir/dir.x;						traveled += Math.sqrt(xdir*xdir + ydir*ydir);						if(map[cell.x][cell.y-1]=='#'){							dir.x = -dir.x;							p.x = 0;							p.y = p.y + ydir;						} else {							cell.y--;							p.x = 1;							p.y = p.y + ydir;						}					} else if(p.y + ydir > 0.9999){ //go to next y cell						traveled += Math.sqrt(xdir*xdir + ydir*ydir);						if(map[cell.x+1][cell.y]=='#'){							dir.y = -dir.y;							p.y = 1;							p.x = p.x + xdir;						} else {							cell.x++;							p.y = 0;							p.x = p.x + xdir;						}					} else if(p.y + ydir < 0.0001){ //go to next y cell						traveled += Math.sqrt(xdir*xdir + ydir*ydir);						if(map[cell.x-1][cell.y]=='#'){							dir.y = -dir.y;							p.y = 0;							p.x = p.x + xdir;						} else {							cell.x--;							p.y = 1;							p.x = p.x + xdir;						}					} else {						System.err.println("error");						System.exit(-1);					}				}			//	System.out.println(traveled + " " + d.x + " " + d.y);				if(traveled<=D+0.0001&&cell.x==startcel.x&&cell.y==startcel.y&&p.x==0.5&&p.y==0.5){					ans++;				}			}			System.out.println("Case #"+(i+1)+": " + ans);		}	}}