/*
???  ??????
?? ?´????)?????/???????????????????
?? ??y:::::???? [?]??????????????????????????????????
?? |:?:|:::::|???|??|
?????????????????|?????????????????
???????????????|??  ??????????????????????????????
???????????????|
???????????????.?|????????????????????????????????
????????????? ??  |??????????????????????????
??????????|???  |?????????????????????????????????
?????????????? |????????????????????
???(??)?(??)?(??)??|
?    ||?? ||??||??|??? ????????????
??.?|???|? ?|?
*/

#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <cstdio>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <string>
#include <vector>
using namespace std;
#define fst first
#define snd second
#define ALL(obj) (obj).begin(),(obj).end()
#define debug(x) cerr << #x << " -> " << x << " (line:" << __LINE__ << ")" << '\n';
#define debugpair(x, y) cerr << "(" << #x << ", " << #y << ") -> (" << x << ", " << y << ") (line:" << __LINE__ << ")" << '\n';
typedef long long lint;
typedef priority_queue<int> p_que;
typedef priority_queue<int, vector<int>, greater<int>()> p_que_rev;
// const int INF = INT_MAX;
const lint LINF = LLONG_MAX;
const lint MOD = 1000000000 + 7;
const double EPS = 1e-9;
const double PI = acos(-1);
const int di[]{0, -1, 0, 1, -1, -1, 1, 1};
const int dj[]{1, 0, -1, 0, 1, -1, -1, 1};


// Graph Templates
using Weight = lint;
// using Flow = int;
struct Edge {
    int src, dst;
    Weight weight;
    // Flow cap;
    Edge() : src(0), dst(0), weight(0) {}
    Edge(int s, int d, Weight w) : src(s), dst(d), weight(w) {}
};
using Edges = vector<Edge>;
using Graph = vector<Edges>;
using Array = vector<Weight>;
using Matrix = vector<Array>;
const Weight INF = numeric_limits<Weight>::max();

// add edge a <--(weight = w)--> b
void add_edge(Graph &g, int a, int b, Weight w) {
    g[a].push_back(Edge(a, b, w));
    g[b].push_back(Edge(b, a, w));
}

// add edge a --(weight = w)--> b
void add_arc(Graph &g, int a, int b, Weight w) { g[a].push_back(Edge(a, b, w)); }


int main()
{
    cin.tie(0);
    ios_base::sync_with_stdio(false);
    lint n, m;
    cin >> n;
    vector<lint> c_tmp(n, 0);
    vector<lint> c;
    int itr = -1;
    for (int i=0; i<n; ++i){
        cin >> c_tmp[i];
        if(itr == -1 || c[itr] != c_tmp[i]){
            c.push_back(c_tmp[i]);
            itr++;
        }
    }
    m = (lint)c.size();
    lint dp[m+1];
    Graph g;
    g.resize(m+1);
    for (int i=0; i<m+1; ++i){
        dp[i] = 0;
    }
    dp[0] = 1;
    vector<int> node_map(200001, -1);
    for (int i=0; i<m; ++i){
        if(node_map[c[i]] == -1){
            add_arc(g, i+1, i, 1);
            node_map[c[i]] = i+1;
        }
        else {
            add_arc(g, i+1, i, 1);
            add_arc(g, i+1, node_map[c[i]], 1);
            node_map[c[i]] = i+1;
        }
    }
    for (int i=0; i<m+1; ++i){
        // cout << "node " << i << endl;
        for (int j=0; j<g[i].size(); ++j){
            int p = g[i][j].dst;
            dp[i] += dp[p];
            dp[i] = dp[i] % MOD;
        }
    }
    dp[m] = dp[m] % MOD;
    cout << dp[m] << endl;
    return 0;
}