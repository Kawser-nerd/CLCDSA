using System;
using System.Collections.Generic;
using System.Linq;

namespace CandyDistribution
{
    /// <summary>
    /// 
    /// </summary>
    public class Program2
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="args"></param>
        public static void Main(string[] args)
        {
            // ?????????
            var n_m = Console.ReadLine().Split(' ');
            var n = long.Parse(n_m[0]);
            var m = long.Parse(n_m[1]);
            var boxes = Console.ReadLine().Split(' ').Select(s => long.Parse(s));

            /* N???????i???????????????M????????????????
             * ??????????????M?????2???(??0?1?)???????
             * ??????????? +1???????????????????????
             * ???0?????????????????????
             * ??
             * ???6?(4, 1, 5, 4, 1, 5) ??2????
             * 
             * ???????  1,  2,  3,  4,  5,  6
             * ???????  4,  1,  5,  4,  1,  5
             * ???????  4,  5,  10, 14, 15, 20
             * ???????  0,  1,  0,  0,  1,  0
             * ????(0) ?  1,  -,  2,  3,  -,  4 = 10?
             * ????(1) ?  -,  0,  -,  -,  1,  - =  1?
             * ???????                          11?
             * 
             * ????(1)?5???1?????????
             * ?????(1)?2???  5 % 2 = 1???????????????
             * ?????(1)?5??? 15 % 2 = 1??????
             * ????3???5??????10(5, 4, 1)??????
             * ?10 % 2 = 0???????????????????
             * ??????? 1????????????????
             * 
             * ?????????????????????????????
             * ??????N?????????
             */

            // ????????????
            var sumBoxes = GetSumBoxes(boxes);

            // ?????????????????
            var modNums = GetModNums(sumBoxes, m);

            // ????????????
            var ans = GetDivSum(modNums);

            // ???????
            Console.WriteLine(ans);
        }

        /// <summary>
        /// ????????????
        /// </summary>
        /// <param name="boxes">??????</param>
        /// <returns></returns>
        public static IEnumerable<long> GetSumBoxes(IEnumerable<long> boxes)
        {
            var sumBoxes = new List<long>();
            var sum = 0L;
            boxes.ToList().ForEach(num =>
            {
                sum += num;
                sumBoxes.Add(sum);
            });

            return sumBoxes;
        }

        /// <summary>
        /// ????????????
        /// </summary>
        /// <param name="sum">??????</param>
        /// <returns></returns>
        public static IEnumerable<long> GetModNums(IEnumerable<long> sum, long m)
        {
            var modNums = sum.Select(num => num % m);

            return modNums;
        }

        /// <summary>
        /// ????????????
        /// </summary>
        /// <param name="modNums">??????</param>
        /// <returns></returns>
        public static long GetDivSum(IEnumerable<long> modNums)
        {
            var divSum = 0L;
            var modCountDict = new Dictionary<long, long>();
            // 
            modNums.ToList().ForEach(modNum =>
            {
                // ??????????
                if (modCountDict.ContainsKey(modNum))
                {
                    modCountDict[modNum]++;
                } else
                {
                    if (modNum == 0L)
                    {
                        // ??0???????????????1??
                        modCountDict.Add(modNum, 1L);
                    } else
                    {
                        modCountDict.Add(modNum,0L);
                    }
                }
                // ??????????
                divSum += modCountDict[modNum];
            });

            return divSum;
        }
    }
}