#include <stdio.h>
#include <gmp.h>

#define ABS(x,y) ((x)>(y))?((x)-(y)):((y)-(x))

mpz_t Values[1000];
mpz_t mindiff,min;

int minandmindiff(unsigned long nums){
	mpz_t aux;
	unsigned long i,j;

	mpz_init(aux);

	mpz_set(min,Values[0]);

	for(i=1;i<nums;i++){
		if (mpz_cmp(Values[0],Values[i])){
			mpz_sub(aux,Values[0],Values[i]);
			mpz_abs(mindiff,aux);
			break;
		}
	}

	for(i=0;i<nums;i++){
		if (Values[i]<min)
			mpz_set(min,Values[i]);
		for(j=i+1;j<nums;j++){
			if (mpz_cmp(Values[i],Values[j])){
				mpz_sub(aux,Values[i],Values[j]);
				mpz_abs(aux,aux);
				mpz_gcd(mindiff,mindiff,aux);
			}
		}
	}

	return 0;
}

int main(int argc, char *argv[]){
	mpz_t res;
	int cases,nums;
	int i,j;

	for(i=0;i<1000;i++){
		mpz_init(Values[i]);
	}
	mpz_init(mindiff);
	mpz_init(min);
	mpz_init(res);

	if (1!=scanf("%d",&cases)){
		fprintf(stderr,"%d\n",__LINE__);
		return -1;
	}

	for (i=1;i<=cases;i++){
		if (1!=scanf("%d",&nums)){
			fprintf(stderr,"%d\n",__LINE__);
			return -1;
		}
		for (j=0;j<nums;j++){
			mpz_inp_str(Values[j],stdin,10);
		}
		minandmindiff(nums);
		mpz_mod(res,min,mindiff);
		if (mpz_sgn(res))
			mpz_sub(res,mindiff,res);
		fprintf(stdout,"Case #%d: ",i);
		mpz_out_str(stdout,10,res);
		fprintf(stdout,"\n");
	}
	return 0;
}
