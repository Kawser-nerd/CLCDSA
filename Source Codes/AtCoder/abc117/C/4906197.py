#!/usr/bin/env python3
import sys


def solve(N: int, M: int, X: "List[int]"):
    if N >= M:
        print(0)
        return
    X.sort()
    dist = []
    for i in range(1, len(X)):
        dist.append(abs(X[i] - X[i - 1]))
    distIndices = [(dist[i], i) for i in range(len(dist))]
    distIndices.sort(reverse=True)
    splitIndex = []
    for i in range(N-1):
        splitIndex.append(distIndices[i][1])
    splitIndex.sort()
    ranges = []
    begin = 0
    for next in splitIndex:
        ranges.append(X[begin:next+1])
        begin = next+1
    ranges.append(X[begin:])
    cost = 0
    for R in ranges:
        if len(R) == 1:
            continue
        cost += R[-1] - R[0]
    print(cost)
    return


# Generated by 1.1.3 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    X = [int(next(tokens)) for _ in range(M)]  # type: "List[int]"
    solve(N, M, X)


if __name__ == '__main__':
    main()