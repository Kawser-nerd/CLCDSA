import math

# ??
def P(n, r):
    return math.factorial(n)//math.factorial(n-r)
# ?????
def C(n, r):
    return P(n, r)//math.factorial(r)
# x*y????????????????????????????????
def allocation_d_l(x, y):
    #??????????????????????
    if x<0 or y<0:
        return 0
    elif x*y < d+l:
        return 0
    else:
        return C(x * y, d) * C(x * y - d, l)

# AtCoder???????????r???c
r, c = map(int, input().split())
# ??????????????????x???y
x, y = map(int, input().split())
# d ????? l ?????????
d, l = map(int, input().split())

# r*c??????x*y???????????
pattern_wall = (r - x + 1) * (c - y + 1)

# x*y???????????????????100?
if x*y == d+l:
    pattern_d_l = C(x*y, d)
# xy?????????????101?
elif x*y > d+l:
    # xy??????????????????????????
    pattern_d_l = allocation_d_l(x, y)
    # ??????????????????????????????????????????????
    pattern_eliminate = allocation_d_l(x-1, y)*2 + allocation_d_l(x, y-1)*2
    pattern_eliminate -= allocation_d_l(x-1, y-1)*4 + allocation_d_l(x-2, y) + allocation_d_l(x, y-2)
    pattern_eliminate += allocation_d_l(x-1, y-2) * 2 + allocation_d_l(x-2, y-1) * 2 
    pattern_eliminate -= allocation_d_l(x-2, y-2)
    # ??????????????????
    pattern_d_l = pattern_d_l - pattern_eliminate

divisor = 10**9+7
print(pattern_wall * pattern_d_l % divisor)