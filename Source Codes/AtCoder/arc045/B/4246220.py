def b_dokidoki_takahashi(N, M, Sections):
    # ??????????2?????????????????????????????
    # [k]: ?????????????????k??????????????????
    cleaned_count = [0] * (N + 2)
    for s, t in Sections:
        cleaned_count[s] += 1
        cleaned_count[t + 1] -= 1
    for i in range(1, N + 2):
        cleaned_count[i] += cleaned_count[i - 1]

    # ???????????????????????????
    # ???????????????????????????????????1???????
    # X[i]: ??i??????1??1????????0???
    # S: X????
    # ??????????????????1???????O(1)?????
    X = [1 if x == 1 else 0 for x in cleaned_count]
    for i in range(1, N + 2):
        X[i] += X[i - 1]
    X.pop()

    num_can_assign = []
    for k, (s, t) in enumerate(Sections, 1):
        if X[t] - X[s - 1] == 0:
            num_can_assign.append(k)
    ans = '\n'.join(map(str, [len(num_can_assign)] + num_can_assign))
    return ans

N, M = [int(i) for i in input().split()]
Sections = [[int(i) for i in input().split()] for j in range(M)]
print(b_dokidoki_takahashi(N, M, Sections))