/*
???  ??????
?? ?´????)?????/???????????????????
?? ??y:::::???? [?]??????????????????????????????????
?? |:?:|:::::|???|??|
?????????????????|?????????????????
???????????????|??  ??????????????????????????????
???????????????|
???????????????.?|????????????????????????????????
????????????? ??  |??????????????????????????
??????????|???  |?????????????????????????????????
?????????????? |????????????????????
???(??)?(??)?(??)??|
?    ||?? ||??||??|??? ????????????
??.?|???|? ?|?
*/

#include <iostream>
#include <cstdlib>
#include <algorithm>
#include <array>
#include <bitset>
#include <climits>
#include <cmath>
#include <cstdio>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <string>
#include <vector>
using namespace std;
#define fst first
#define snd second
#define ALL(obj) (obj).begin(),(obj).end()
#define debug(x) cerr << #x << " -> " << x << " (line:" << __LINE__ << ")" << '\n';
#define debugpair(x, y) cerr << "(" << #x << ", " << #y << ") -> (" << x << ", " << y << ") (line:" << __LINE__ << ")" << '\n';
typedef long long lint;
typedef priority_queue<int> p_que;
typedef priority_queue<int, vector<int>, greater<int>()> p_que_rev;
const int INF = INT_MAX;
const lint LINF = LLONG_MAX;
const int MOD = 1000000000 + 7;
const double EPS = 1e-9;
const double PI = acos(-1);
const int di[]{0, -1, 0, 1, -1, -1, 1, 1};
const int dj[]{1, 0, -1, 0, 1, -1, -1, 1};

vector<lint> eratosthenes_sieve(lint n) {
    vector<lint> ps(n + 1);
    iota(ps.begin() + 2, ps.end(), 2);
    for (lint i = 2; i * i <= n; ++i)
        if (ps[i])
            for (lint j = i * i; j <= n; j += i) ps[j] = 0;
    return ps;
}

vector<lint> make_primes(lint n) {
    vector<lint> ps = eratosthenes_sieve(n);
    ps.erase(remove(ps.begin(), ps.end(), 0), ps.end());
    return ps;
}

int main()
{
    cin.tie(0);
    ios_base::sync_with_stdio(false);
    lint q, l, r;
    scanf("%lld", &q);
    vector<lint> ps = make_primes(100000);
    set<lint> prime;
    for (auto n : ps){
        prime.insert(n);
    }
    vector<lint> ans(100001, 0);
    for (int i=3; i<=100000; i+=2){
        if(prime.count(i) == 1 && prime.count((i + 1) / 2) == 1){
            ans[i] = ans[i - 2] + 1;
            ans[i + 1] = ans [i];
        }
        else {
            ans[i] = ans[i - 2];
            ans[i + 1] = ans[i];
        }
    }
    for (lint i = 0; i < q; ++i){
        scanf("%lld %lld", &l, &r);
        lint q_ans = ans[r] - ans[l - 1];
        printf("%lld\n", q_ans);
    }
    return 0;
}