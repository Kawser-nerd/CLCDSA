import java.util.InputMismatchException;
import java.math.BigInteger;
import java.io.*;
import java.util.Locale;

/**
 * Generated by Contest helper plug-in
 * Actual solution is at the bottom
 */
public class Main {
	public static void main(String[] args) {
		try {
			System.setIn(new FileInputStream("a.in"));
			System.setOut(new PrintStream(new FileOutputStream("a.out")));
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
		InputReader in = new StreamInputReader(System.in);
		PrintWriter out = new PrintWriter(System.out);
		run(in, out);
	}

	public static void run(InputReader in, PrintWriter out) {
		Solver solver = new TaskA();
		int testCount = in.readInt();
		for (int i = 1; i <= testCount; i++)
			solver.solve(i, in, out);
		Exit.exit(in, out);
	}
}

abstract class InputReader {
	private boolean finished = false;

	public abstract int read();

	public int readInt() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		int res = 0;
		do {
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		} while (!isSpaceChar(c));
		return res * sgn;
	}

	public String readString() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		StringBuffer res = new StringBuffer();
		do {
			res.appendCodePoint(c);
			c = read();
		} while (!isSpaceChar(c));
		return res.toString();
	}

	private boolean isSpaceChar(int c) {
		return c == ' ' || c == '\n' || c == '\r' || c == '\t' || c == -1;
	}

	public double readDouble() {
		int c = read();
		while (isSpaceChar(c))
			c = read();
		int sgn = 1;
		if (c == '-') {
			sgn = -1;
			c = read();
		}
		double res = 0;
		while (!isSpaceChar(c) && c != '.') {
			if (c == 'e' || c == 'E')
				return res * Math.pow(10, readInt());
			if (c < '0' || c > '9')
				throw new InputMismatchException();
			res *= 10;
			res += c - '0';
			c = read();
		}
		if (c == '.') {
			c = read();
			double m = 1;
			while (!isSpaceChar(c)) {
				if (c == 'e' || c == 'E')
					return res * Math.pow(10, readInt());
				if (c < '0' || c > '9')
					throw new InputMismatchException();
				m /= 10;
				res += (c - '0') * m;
				c = read();
			}
		}
		return res * sgn;
	}

	public void setFinished(boolean finished) {
		this.finished = finished;
	}

	public abstract void close();
}

class StreamInputReader extends InputReader {
	private InputStream stream;
	private byte[] buf = new byte[1024];
	private int curChar, numChars;

	public StreamInputReader(InputStream stream) {
		this.stream = stream;
	}

	public int read() {
		if (numChars == -1)
			throw new InputMismatchException();
		if (curChar >= numChars) {
			curChar = 0;
			try {
				numChars = stream.read(buf);
			} catch (IOException e) {
				throw new InputMismatchException();
			}
			if (numChars <= 0)
				return -1;
		}
		return buf[curChar++];
	}

	public void close() {
		try {
			stream.close();
		} catch (IOException ignored) {
		}
	}
}

class Exit {
	private Exit() {
	}

	public static void exit(InputReader in, PrintWriter out) {
		in.setFinished(true);
		in.close();
		out.close();
	}
}

interface Solver {
	public void solve(int testNumber, InputReader in, PrintWriter out);
}

class GeometryUtils {
	public static double epsilon = 1e-8;

	public static double fastHypot(double...x) {
		if (x.length == 0)
			return 0;
		else if (x.length == 1)
			return Math.abs(x[0]);
		else {
			double sumSquares = 0;
			for (double value : x)
				sumSquares += value * value;
			return Math.sqrt(sumSquares);
		}
	}

	}

class Line {
	public final double a;
	public final double b;
	public final double c;

	public Line(double a, double b, double c) {
		double h = GeometryUtils.fastHypot(a, b);
		if (a < -GeometryUtils.epsilon) {
			a = -a;
			b = -b;
			c = -c;
		} else if (a < GeometryUtils.epsilon && b < -GeometryUtils.epsilon) {
			b = -b;
			c = -c;
		}
		this.a = a / h;
		this.b = b / h;
		this.c = c / h;
	}

	public Point intersect(Line other) {
		if (parallel(other))
			return null;
		double determinant = b * other.a - a * other.b;
		double x = (c * other.b - b * other.c) / determinant;
		double y = (a * other.c - c * other.a) / determinant;
		return new Point(x, y);
	}

	public boolean parallel(Line other) {
		return Math.abs(a * other.b - b * other.a) < GeometryUtils.epsilon;
	}

	}

class Point {
	public final double x;
	public final double y;

	public Point(double x, double y) {
		this.x = x;
		this.y = y;
	}

	public Line line(Point other) {
		if (equals(other))
			return null;
		double a = other.y - y;
		double b = x - other.x;
		double c = -a * x - b * y;
		return new Line(a, b, c);
	}

	public boolean equals(Object o) {
		if (this == o)
			return true;
		if (o == null || getClass() != o.getClass())
			return false;

		Point point = (Point) o;

		return Math.abs(x - point.x) <= GeometryUtils.epsilon && Math.abs(y - point.y) <= GeometryUtils.epsilon;
	}

	public int hashCode() {
		int result;
		long temp;
		temp = x != +0.0d ? Double.doubleToLongBits(x) : 0L;
		result = (int) (temp ^ (temp >>> 32));
		temp = y != +0.0d ? Double.doubleToLongBits(y) : 0L;
		result = 31 * result + (int) (temp ^ (temp >>> 32));
		return result;
	}

	public double distance(Point other) {
		return GeometryUtils.fastHypot(x - other.x, y - other.y);
	}

	}

class Polygon {
	public final Point[] vertices;

	public Polygon(Point...vertices) {
		this.vertices = vertices;
	}

	public double square() {
		double sum = 0;
		for (int i = 1; i < vertices.length; i++)
			sum += (vertices[i].x - vertices[i - 1].x) * (vertices[i].y + vertices[i - 1].y);
		sum += (vertices[0].x - vertices[vertices.length - 1].x) * (vertices[0].y + vertices[vertices.length - 1].y);
		return Math.abs(sum) / 2;
	}
}

class Segment {
	public final Point a;
	public final Point b;

	public Segment(Point a, Point b) {
		this.a = a;
		this.b = b;
	}

	public double length() {
		return a.distance(b);
	}

	public Line line() {
		return a.line(b);
	}

	}

class TaskA implements Solver {
	static {
		Locale.setDefault(Locale.US);
		GeometryUtils.epsilon = 1e-11;
	}

	public void solve(int testNumber, InputReader in, PrintWriter out) {
		double width = in.readDouble();
		int lowerPointCount = in.readInt();
		int upperPointCount = in.readInt();
		int guestCount = in.readInt();
		Point[] lowerPoint = new Point[lowerPointCount];
		for (int i = 0; i < lowerPointCount; i++) {
			int x = in.readInt();
			int y = in.readInt();
			lowerPoint[i] = new Point(x, y);
		}
		Point[] upperPoint = new Point[upperPointCount];
		for (int i = 0; i < upperPointCount; i++) {
			int x = in.readInt();
			int y = in.readInt();
			upperPoint[i] = new Point(x, y);
		}
		double totalArea = 0;
		for (int i = 1; i < lowerPointCount; i++)
			totalArea += (lowerPoint[i].x - lowerPoint[i - 1].x) * (lowerPoint[i].y + lowerPoint[i - 1].y);
		for (int i = 1; i < upperPointCount; i++)
			totalArea -= (upperPoint[i].x - upperPoint[i - 1].x) * (upperPoint[i].y + upperPoint[i - 1].y);
		totalArea = Math.abs(totalArea) / 2;
		int upperIndex = 0;
		int lowerIndex = 0;
		double partArea = totalArea / guestCount;
		double[] answer = new double[guestCount - 1];
		Segment upperSegment = new Segment(upperPoint[0], upperPoint[1]);
		Segment lowerSegment = new Segment(lowerPoint[0], lowerPoint[1]);
		double remainingArea = partArea;
		for (int i = 0; i < guestCount - 1; i++) {
			while (remainingArea != 0) {
				double x = Math.min(upperSegment.b.x, lowerSegment.b.x);
				Line vertical = new Point(x, 0).line(new Point(x, 1));
				Point upperIntersection = upperSegment.line().intersect(vertical);
				Point lowerIntersection = lowerSegment.line().intersect(vertical);
				Polygon polygon = new Polygon(upperSegment.a, upperIntersection, lowerIntersection, lowerSegment.a);
				double square = polygon.square();
				if (square < remainingArea) {
					remainingArea -= square;
					upperSegment = new Segment(upperIntersection, upperPoint[upperIndex + 1]);
					if (upperSegment.length() < GeometryUtils.epsilon) {
						upperSegment = new Segment(upperPoint[upperIndex + 1], upperPoint[upperIndex + 2]);
						upperIndex++;
					}
					lowerSegment = new Segment(lowerIntersection, lowerPoint[lowerIndex + 1]);
					if (lowerSegment.length() < GeometryUtils.epsilon) {
						lowerSegment = new Segment(lowerPoint[lowerIndex + 1], lowerPoint[lowerIndex + 2]);
						lowerIndex++;
					}
					answer[i] = x;
					continue;
				}
				double left = upperSegment.a.x;
				double right = x;
				while (right - left > GeometryUtils.epsilon) {
					x = (left + right) / 2;
					vertical = new Point(x, 0).line(new Point(x, 1));
					upperIntersection = upperSegment.line().intersect(vertical);
					lowerIntersection = lowerSegment.line().intersect(vertical);
					polygon = new Polygon(upperSegment.a, upperIntersection, lowerIntersection, lowerSegment.a);
					square = polygon.square();
					if (square < remainingArea)
						left = x;
					else
						right = x;
				}
				x = (left + right) / 2;
				vertical = new Point(x, 0).line(new Point(x, 1));
				upperIntersection = upperSegment.line().intersect(vertical);
				lowerIntersection = lowerSegment.line().intersect(vertical);
				remainingArea = 0;
				upperSegment = new Segment(upperIntersection, upperPoint[upperIndex + 1]);
				if (upperSegment.length() < GeometryUtils.epsilon) {
					upperSegment = new Segment(upperPoint[upperIndex + 1], upperPoint[upperIndex + 2]);
					upperIndex++;
				}
				lowerSegment = new Segment(lowerIntersection, lowerPoint[lowerIndex + 1]);
				if (lowerSegment.length() < GeometryUtils.epsilon) {
					lowerSegment = new Segment(lowerPoint[lowerIndex + 1], lowerPoint[lowerIndex + 2]);
					lowerIndex++;
				}
				answer[i] = x;
			}
		}
		out.println("Case #" + testNumber + ":");
		for (double value : answer)
			out.printf("%.10f\n", value);
	}
}

