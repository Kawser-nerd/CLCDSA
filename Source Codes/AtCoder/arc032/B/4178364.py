def b_construction(N, M, Road):
    class UnionFind(object):
        def __init__(self, N):
            self.p = list(range(N))  # ??????i??????(parent)?i?
            self.rank = [0] * N  # ?????????????0(?????????)
            self.size = [1] * N  # ????????????????????1

        def union(self, x, y):  # x,y????????????
            u = self.find(x)
            v = self.find(y)
            if u == v:  # x,y???????????????
                return
            if self.rank[u] < self.rank[v]:
                self.p[u] = v  # ?????????????
                self.size[v] += self.size[u]  # ??????????????
                self.size[u] = 0  # ??????????????????
            else:
                # ???????
                self.p[v] = u
                self.size[u] += self.size[v]
                self.size[v] = 0
                if self.rank[u] == self.rank[v]:
                    # ?????1??????
                    self.rank[u] += 1

        def find(self, x):  # ??x???????????(????)????
            if self.p[x] != x:  # ??x???????????
                self.p[x] = self.find(self.p[x])  # ????(x???????)
            return self.p[x]

        def __str__(self):
            return '[{}]'.format(', '.join(map(str, self.p)))

    uf = UnionFind(N)
    for a, b in Road:
        uf.union(a - 1, b - 1)
    ans = len([1 for v in range(N) if uf.find(v) == v]) - 1
    return ans

N, M = [int(i) for i in input().split()]
Road = [[int(i) for i in input().split()] for j in range(M)]
print(b_construction(N, M, Road))