#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <algorithm>
#include <functional>
#include <string>
#include <vector>
#include <queue>
#include <stdio.h>
using namespace std;

#define REP(i,n) for(int i=0, i##_len=(n); i<i##_len; ++i)
#define REPL(i,f,n) for(int i=f, i##_len=(n); i<i##_len; ++i)
typedef long long ll;
typedef pair<int,int> P; // ????????pair

const int INF = 2510;
// ??4???????
int dx[4] = { 1,0,-1, 0 };
int dy[4] = { 0,1, 0,-1 };

int sx = 0, sy = 0; // ???????
int gx, gy; // ??????
int H, W;
string s[60]; // ???????????
int d[60][60] = {INF}; // ????????????
// {sx,sy}??{gx,gy}??????????
// ???????INF
int bfs() {
	queue<P> que;
	// ?????????????????????0?
	que.push(P(sx,sy));
	REP(i, H) {
		REP(j, W) {
			d[i][j] = INF;
		}
	}
	d[sx][sy] = 0;

	// ?????????????
	while (!que.empty()) {
		// ??????????
		P p = que.front(); que.pop();
		// ????????????????????
		if (p.first == gx && p.second == gy)break;
		// ??4??????
		REP(i, 4) {
			// ??????(nx,ny)???
			int nx = p.first + dx[i], ny = p.second + dy[i];
			// ???????????????????????
			if (0 <= nx && nx < H && 0 <= ny && ny < W && s[nx][ny] != '#' 
				&& d[nx][ny] == INF) {
				// ?????????????????????p?????+1?????
				que.push(P(nx, ny));
				d[nx][ny] = d[p.first][p.second] + 1;
			}
		}
	}
	return d[gx][gy];
}
int main() {
	cin.tie(0);
	ios::sync_with_stdio(false);

	cin >> H >> W;
	gx = H - 1,gy = W - 1; // ??????
	int shCnt = 0;
	REP(i, H) {
		cin >> s[i];
		REP(j, W) {
			if (s[i][j] == '#') {
				shCnt++;
			}
		}
	} 

	int res = bfs();

	cout << (res!=INF?H*W-res-1-shCnt:-1) << endl;
	return 0;
}