def b_on_common_circle(N, Points):
    """
    N????????????????????P???????????????
    ?P????1?????
    """

    # L1????????????????????????????????
    # ???? {u, v} = {{cos45°, -sin45°}, {sin45°, cos45°}} {x, y}
    # ???????uv???????????????????????????????
    # u = x-y, v = x+y (x = (u+v)/2, y = (v-u)/2)??????
    u, v = [], []
    for x, y in Points:
        u.append(x - y)
        v.append(x + y)

    # ?????u???????????v????????????????????
    # ????1?????????
    d = max(abs(max(u) - min(u)), abs(max(v) - min(v)))

    # ?P???? (u_p, v_p) ??????????
    # max(u) - d/2 ??? min(u) + d/2 ? max(v) - d/2 ??? min(v) - d/2
    # ???4??????????????????N?????L1???????
    # ????????
    for u_p in (max(u) - d // 2, min(u) + d // 2):
        for v_p in (max(v) - d // 2, min(v) + d // 2):
            x_p, y_p = (u_p + v_p) // 2, (-u_p + v_p) // 2
            manhattan_distance = abs(x_p - Points[0][0]) + abs(y_p - Points[0][1])
            for x_k, y_k in Points:
                if abs(x_p - x_k) + abs(y_p - y_k) != manhattan_distance:
                    break
            else:
                ans = '{0} {1}'.format(x_p, y_p)
                return ans
    # ?????????????????
    return None

N = int(input())
Points = [[int(i) for i in input().split()] for j in range(N)]
print(b_on_common_circle(N, Points))