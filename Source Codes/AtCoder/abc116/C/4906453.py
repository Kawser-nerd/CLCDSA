#!/usr/bin/env python3
import sys


def solve(N: int, h: "List[int]"):
    cost = 0
    CUR = [0 for i in range(len(h))]
    for i in range(len(CUR)):
        while CUR[i] != h[i]:  # ???????????????????????
            l = i
            r = i
            for j in range(i, len(CUR)):
                if CUR[i] >= h[j]:
                    break
                r += 1
            grow = 10 ** 16
            for j in range(l, r):
                grow = min(grow, h[j] - CUR[j])
            #cost += 1
            for j in range(l, r):
                CUR[j] += grow
            cost += grow
    print(cost)
    return


# Generated by 1.1.3 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    h = [int(next(tokens)) for _ in range(N)]  # type: "List[int]"
    solve(N, h)


if __name__ == '__main__':
    main()