class UnionFind:

    # ?????
    # ????????????????
    # 0 <= (query?????????????) <= N - 1
    def __init__(self, N):
        self.parent = [i for i in range(N)]
        self.rank = [0 for _ in range(N)]
    
    # ????????
    # ???????????????????????
    def find(self, x):
        if self.parent[x] == x:
            return x
        else:
            # ????????
            self.parent[x] = self.find(self.parent[x])
            return self.parent[x]
    
    # ????????
    def unite(self, x, y):
        # ????
        x = self.find(x)
        y = self.find(y)
        # ?????????????
        if x == y:
            return
        # rank??????
        # rank??????????????
        if self.rank[x] < self.rank[y]:
            self.parent[x] = y
        else:
            self.parent[y] = x
            # ??????????x?y????????
            if self.parent[x] == self.parent[y]:
                self.rank[x] += 1
    
    # ????????????????????
    def same(self, x, y):
        return self.find(x) == self.find(y)


N, M = map(int, input().split())

union_find = UnionFind(N)
ans = 0
for _ in range(M):
    one, other = map(int, input().split())
    one -= 1
    other -= 1
    union_find.unite(one, other)


ans = set()
for i in range(N):
    ans.add(union_find.find(i))

print(len(ans) - 1)