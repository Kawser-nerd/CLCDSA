/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>


#include <iterator>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator: public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(int value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin <= end);
	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin >= end);
	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	return ReversedIntegerRange<T>(from + 1, to);
}


using namespace std;

class TaskB {
public:
	void solve(std::istream& in, std::ostream& out) {
		string ans1, ans2;
		int64_t bestDiff = (int64_t) 2e18;
		auto relax = [&](const string& l, const string& r) {
			int64_t L = atoll(l.data());
			int64_t R = atoll(r.data());
			int64_t diff = abs(R - L);
			if (diff < bestDiff || diff == bestDiff && (l < ans1 || l == ans1 && r < ans2)) {
				ans1 = l;
				ans2 = r;
				bestDiff = diff;
			}
		};
		string f, s;
		in >> f >> s;

		int n = int(f.size());
		bool breaked = false;
		string prefix;
		for (int i = 0; i < n; ++i) {
			for (char k: inclusiveRange('0', '9')) {
				if (f[i] != '?' && f[i] != k) {
					continue;
				}
				for (char l: inclusiveRange('0', '9')) {
					if (s[i] != '?' && s[i] != l) {
						continue;
					}
					string z1 = prefix + k;
					string z2 = prefix + l;
					{
						string u1 = z1;
						string u2 = z2;
						for (int t: range(i + 1, n)) {
							if (f[t] == '?') {
								u1 += '0';
							} else {
								u1 += f[t];
							}
						}
						for (int t: range(i + 1, n)) {
							if (s[t] == '?') {
								u2 += '9';
							} else {
								u2 += s[t];
							}
						}
						relax(u1, u2);
					}
					{
						string u1 = z1;
						string u2 = z2;
						for (int t: range(i + 1, n)) {
							if (f[t] == '?') {
								u1 += '9';
							} else {
								u1 += f[t];
							}
						}
						for (int t: range(i + 1, n)) {
							if (s[t] == '?') {
								u2 += '0';
							} else {
								u2 += s[t];
							}
						}
						relax(u1, u2);
					}
				}
			}

			if (f[i] != '?') {
				prefix += f[i];
			} else if (s[i] != '?') {
				prefix += s[i];
			} else {
				prefix += '0';
			}
			if (f[i] != '?' && s[i] != '?' && f[i] != s[i]) {
				breaked = true;
				break;
			}
		}
		if (!breaked) {
			relax(prefix, prefix);
		}

		static int test = 0;
		out << "Case #" << ++test << ": " << ans1 << ' ' << ans2 << "\n";
	}
};

#include <dirent.h>
#include <stdexcept>
#include <regex>
#include <sys/stat.h>
#include <cstdint>

std::string getLastFileName(const std::string& regexString) {
	DIR* dir;
	dirent* entry;
	std::string result = "";
	int64_t resultModificationTime = 0;
	std::regex regex(regexString);
	if ((dir = opendir (".")) != NULL) {
		while ((entry = readdir (dir)) != NULL) {
			if (std::regex_match(entry->d_name, regex)) {
				struct stat buffer;
				stat(entry->d_name, &buffer);
				int64_t modificationTime = static_cast<int64_t>(buffer.st_mtimespec.tv_sec) * 1000000000 +
						static_cast<int64_t>(buffer.st_mtimespec.tv_nsec);

				if (modificationTime > resultModificationTime) {
					resultModificationTime = modificationTime;
					result = entry->d_name;
				}
			}
		}
		closedir (dir);
	} else {
		throw std::runtime_error("Couldn't open current directory");
	}
	if (result.empty()) {
		throw std::runtime_error("No file found");
	}	return result;
}

int main() {
	std::ios_base::sync_with_stdio(false);
	TaskB solver;
	std::ifstream in(getLastFileName("B-(small|large).*[.]in"));
	std::ofstream out("b.out");
	in.tie(0);
	out << std::fixed;
	out.precision(20);
	int n;
in >> n;
for(int i = 0; i < n; ++i) {
	solver.solve(in, out);
}

	return 0;
}
