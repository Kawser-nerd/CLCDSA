#!/usr/bin/env python3
import sys
import pprint


def solve(N: int, M: int, Q: int, L: "List[int]", R: "List[int]", p: "List[int]", q: "List[int]"):
    mem = [[0] * N for i in range(N)]
    mem2 = [[0] * N for i in range(N)]
    for i in range(M):
        mem[L[i] - 1][R[i] - 1] += 1
    for h in range(N):
        for w in range(N):
            sum = mem[h][w]
            if h == 0 and w > 0:
                sum += mem2[h][w-1]
            elif w == 0 and h > 0:
                sum += mem2[h-1][w]
            elif h > 0 and w > 0:
                sum += mem2[h][w-1] + mem2[h-1][w] - mem2[h-1][w-1]
            mem2[h][w] = sum
    for i in range(Q):
        pc = p[i]-1
        qc = q[i]-1
        low = mem2[pc-1][qc] + mem2[qc][pc-1] - \
            mem2[pc-1][pc-1] if pc > 0 else 0
        sum = mem2[qc][qc] - low
        print(sum)
    return


# Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    Q = int(next(tokens))  # type: int
    L = [int()] * (M)  # type: "List[int]"
    R = [int()] * (M)  # type: "List[int]"
    for i in range(M):
        L[i] = int(next(tokens))
        R[i] = int(next(tokens))
    p = [int()] * (Q)  # type: "List[int]"
    q = [int()] * (Q)  # type: "List[int]"
    for i in range(Q):
        p[i] = int(next(tokens))
        q[i] = int(next(tokens))
    solve(N, M, Q, L, R, p, q)


if __name__ == '__main__':
    main()