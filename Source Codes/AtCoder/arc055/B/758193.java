import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.NoSuchElementException;
public class Main {

	int N,K;
	double[][] dp;
	/* dfs(n,k) = n??????????????k???????????????????
	 * N???????????????????????
	 */
	public double dfs(int n,int k){

		if(k == 0){
			// ???????????k?0??????N???????????????0?
			return 0.0;
		}else if(k >= N - n + 1){
			// ????????????????????????????N??????????
			return 1.0;
		}

		if(dp[n][k] != -1){
			return dp[n][k];
		}

		/* n????????N????? */
		// ??N - n + 1????1??N????? 1.0 / (N - n + 1)
		double NSenbei = 1.0 / (N - n + 1);

		// 1.0 - maxP = n????????N?????
		double notNSenbei = (1.0 - NSenbei);

		// 1.0 / n = n?????????????????
		// n?????????????????????1 / n
		double maxSenbei = 1.0 / n;

		// n????????N??????n??????????????
		double notNMaxSenbei = notNSenbei * maxSenbei;

		/* n???????????N??????????? */
		double eat = dfs(n + 1,k - 1) * notNMaxSenbei + NSenbei;

		// n?????????????N???????????
		double notEat = dfs(n + 1,k) * notNMaxSenbei;

		//n?????????n???????????
		double notMaxSenbei = 1.0 - maxSenbei;

		//n????????N?????n????????????
		double notNnotMaxSenbei = notNSenbei * notMaxSenbei;

		return dp[n][k] = notNnotMaxSenbei * dfs(n + 1,k) + Math.max(eat, notEat);
	}

	public void solve() {
		N = nextInt();
		K = nextInt();

		dp = new double[N + 1][N + 1];

		for(int i = 0;i <= N;i++){
			Arrays.fill(dp[i],-1.0);
		}

		out.println(String.format("%.9f",dfs(1,K)));

	}

	public static void main(String[] args) {
		out.flush();
		new Main().solve();
		out.close();
	}

	/* Input */
	private static final InputStream in = System.in;
	private static final PrintWriter out = new PrintWriter(System.out);
	private final byte[] buffer = new byte[2048];
	private int p = 0;
	private int buflen = 0;

	private boolean hasNextByte() {
		if (p < buflen)
			return true;
		p = 0;
		try {
			buflen = in.read(buffer);
		} catch (IOException e) {
			e.printStackTrace();
		}
		if (buflen <= 0)
			return false;
		return true;
	}

	public boolean hasNext() {
		while (hasNextByte() && !isPrint(buffer[p])) {
			p++;
		}
		return hasNextByte();
	}

	private boolean isPrint(int ch) {
		if (ch >= '!' && ch <= '~')
			return true;
		return false;
	}

	private int nextByte() {
		if (!hasNextByte())
			return -1;
		return buffer[p++];
	}

	public String next() {
		if (!hasNext())
			throw new NoSuchElementException();
		StringBuilder sb = new StringBuilder();
		int b = -1;
		while (isPrint((b = nextByte()))) {
			sb.appendCodePoint(b);
		}
		return sb.toString();
	}

	public int nextInt() {
		return Integer.parseInt(next());
	}

	public long nextLong() {
		return Long.parseLong(next());
	}

	public double nextDouble() {
		return Double.parseDouble(next());
	}
}