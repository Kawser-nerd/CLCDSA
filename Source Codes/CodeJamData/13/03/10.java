import java.math.*;
import java.util.*;
import java.io.*;

public class FS {
  private static String makePalStr(String n) {
    StringBuilder builder = new StringBuilder(n.length() * 2);
    builder.append(n);
    for (int i = 0; i < n.length(); ++i) {
      builder.append(n.charAt(n.length() - i - 1));
    }
    return builder.toString();
  }

 

  public static BigInteger makePal(String n) {
    return new BigInteger(makePalStr(n));
  }


  public static boolean isPal(BigInteger n) {
    String s = n.toString();
    StringBuilder reverse = new StringBuilder(s);
    reverse.reverse();
    return (reverse.toString().equals(s));
  }



  public static void dumpEven(int digits) {
    int bstart = (1 << (digits - 1));
    int bend = (1 << digits) - 1;

    List<Integer> offsets = new ArrayList<Integer>();

    int x = 0;
    int last = bstart - 1;
    for (int i = bstart; i <= bend; ++i) {
      String n = Integer.toString(i, 2);
      BigInteger pal = makePal(n);
      BigInteger sq = pal.multiply(pal);
      if (isPal(sq)) {
        x = x + 1;
        offsets.add(i - bstart);
      } else {
        //gaps.add (i - bstart + 1);
      }
    }

    //System.out.println("work: " + (bend - bstart + 1) + "/ gaps:" + gaps.size() + "/: total: " + x);
    System.out.println(offsets);
    //System.out.println(diff(gaps));
    System.out.println(x);
  }

  public static int fun(int n) {
    return (n * n * n - 3 * n * n + 8 * n + 6)/6;
  }

  public static int countDeuce(int digits, BigInteger min, BigInteger max) {
    int count = 0;

    int roundDown = digits / 2;
    int current = 1;
    for (int i = 0; i < roundDown; ++i) {
      int a;
      if (i == 0) {
        a = 1;
      } else {
        a = current + 1;
      }

      String expanded = Integer.toString(a, 2);
      StringBuilder deuce = new StringBuilder();
      for (int j = 0; j < expanded.length(); ++j) {
        deuce.append(expanded.charAt(expanded.length() - j - 1));
      }

      for (int j = 0; j < roundDown - expanded.length(); ++j) {
        deuce.append("0");
      }
      deuce.append("2");
      for (int j = 0; j < roundDown - expanded.length(); ++j) {
        deuce.append("0");
      }
      deuce.append(expanded);

      BigInteger actual = new BigInteger(deuce.toString());
      //System.out.println(actual);
      if (between(min, max, actual)) {
        count = count + 1;
      }
      current = current * 2;
    }

    return count;
  }

  private static BigInteger toEvenBig(int halfDigits, int n) {
    String repr = Integer.toString(n, 2);
    StringBuilder builder = new StringBuilder(halfDigits * 2);
    builder.append(repr);
    for (int i = 0; i < repr.length(); ++i) {
      builder.append(repr.charAt(repr.length() - i - 1));
    }
    return new BigInteger(builder.toString());    
  }

  private static BigInteger toOddBig(int halfDigits, int n, String extra) {
    String repr = Integer.toString(n, 2);
    StringBuilder builder = new StringBuilder(halfDigits * 2);
    builder.append(repr);
    builder.append(extra);
    for (int i = 0; i < repr.length(); ++i) {
      builder.append(repr.charAt(repr.length() - i - 1));
    }
    return new BigInteger(builder.toString());    
  }

  public static int countEven(int digits, BigInteger min, BigInteger max) {
    return countNonDeuceEven(digits, min, max) + countLastEven(digits, min, max);
  }

  public static int countOdd(int digits, BigInteger min, BigInteger max) {
    return countNonDeuceOdd(digits, min, max) + countDeuce(digits, min, max) + countLastOdd(digits, min, max, "0") + countLastOdd(digits, min, max, "1");
  }

  public static int count(int digits, BigInteger min, BigInteger max) {
    if (digits % 2 == 0) {
      return countEven(digits, min, max);
    } else {
      return countOdd(digits, min, max);
    }
  }
  public static int countLastOdd(int digits, BigInteger min, BigInteger max, String extra) {
    int halfDigits = digits / 2;

    StringBuilder builder = new StringBuilder(digits);
    builder.append("2");
    for (int i = 0; i < halfDigits - 1; ++i) {
      builder.append("0");
    }
    builder.append(extra);
    for (int i = 0; i < halfDigits - 1; ++i) {
      builder.append("0");
    }    
    builder.append("2");
    BigInteger pal = new BigInteger(builder.toString());

    
    if (between(min, max, pal)) {
      return 1;
    } else {
      return 0;
    }
  }

  public static int countLastEven(int digits, BigInteger min, BigInteger max) {
    StringBuilder builder = new StringBuilder(digits);
    builder.append("2");
    for (int i = 0; i < digits - 2; ++i) {
      builder.append("0");
    }
    builder.append("2");
    BigInteger pal = new BigInteger(builder.toString());

    
    if (between(min, max, pal)) {
      return 1;
    } else {
      return 0;
    }
  }

  private static int count = 0;


  private static boolean between(BigInteger min, BigInteger max, BigInteger pal) {
    BigInteger sq = pal.multiply(pal);
    if (sq.compareTo(max) <= 0 && sq.compareTo(min) >= 0) {
      debug(pal);
      return true;
    } else {
      return false;
    }
  }
  private static void debug(BigInteger v) {
    ++count;
    //System.out.println(count + " " + v);
  }
  public static int countNonDeuceOdd(int digits, BigInteger min, BigInteger max) {
    int halfDigits = digits / 2;
    int count = 0;
    int start = (1 << (halfDigits - 1));
    int bend = (1 << halfDigits) - 1;

    for (int i = 0; i < OFFSETS.length; ++i) {
      int current = start + OFFSETS[i];
      if (current > bend) {
        break;
      }

      BigInteger pal = toOddBig(halfDigits, current, "0");
     
      if (between(min, max, pal)) {
        count = count + 1;
      }
      pal = toOddBig(halfDigits, current, "1");
      if (between(min, max, pal)) {

        count = count + 1;
      }
    }      

    return count;
  }
  public static int countNonDeuceEven(int digits, BigInteger min, BigInteger max) {
    int halfDigits = digits / 2;
    int count = 0;
    int start = (1 << (halfDigits - 1));
    int bend = (1 << halfDigits) - 1;

    for (int i = 0; i < OFFSETS.length; ++i) {
      int current = start + OFFSETS[i];
      if (current > bend) {
        break;
      }
      BigInteger pal = toEvenBig(halfDigits, current);
      
      if (between(min, max, pal)) {
        count = count + 1;
      }
    }

    return count;
  }

  public static int count(int digits) {
    if (digits % 2 == 0) {
      return countEven(digits);
    } else {
      return countOdd(digits);
    }
  }

  public static int countEven(int digits) {
    // +1 -1
    return fun(digits / 2);
  }

  public static int countOdd(int digits) {
    int roundDown = (digits) / 2;
    return 2 * fun(roundDown) + roundDown;
  }




  private static int countBetween(BigInteger minValue, BigInteger maxValue) {

    int total = 0;

    BigInteger[] initial = new BigInteger[]{BigInteger.valueOf(1), BigInteger.valueOf(2), BigInteger.valueOf(3)};

    for (int i = 0; i < initial.length; ++i) {
      if (between(minValue, maxValue, initial[i])) {
        total += 1;
      }
    }

    for (int digits = 2; digits <= 50; ++digits) {
      total += count(digits, minValue, maxValue);
    }


    return total;
  }

  private static void guess() {
    long total = 0;
    for (int i = 2; i <= 50; ++i) {
      total += count(i);
      int other = count(i, BigInteger.valueOf(0), BigInteger.valueOf(10).pow(100));
      System.out.println(i + "/" + count(i) + "/" + other);
    }

    System.out.println(total);
  }

  public static void main(String[] args) throws Exception {
    //guess();
    BufferedReader reader = new BufferedReader(new FileReader(args[0]));
    try {
      int cases = Integer.parseInt(reader.readLine());
      for (int i = 1; i <= cases; ++i) {
        String[] parts = reader.readLine().split(" ");
        BigInteger a = new BigInteger(parts[0]);
        BigInteger b = new BigInteger(parts[1]);
        System.out.println("Case #" + (i) + ": " + countBetween(a, b));
      }
    } finally {
      reader.close();
    }




  }

  /* from dumpEven */

  private static final int[] OFFSETS = new int[]{
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 28, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 44, 48, 49, 50, 52, 56, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 76, 80, 81, 82, 84, 88, 96, 97, 98, 100, 104, 112, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 140, 144, 145, 146, 148, 152, 160, 161, 162, 164, 168, 176, 192, 193, 194, 196, 200, 208, 224, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 268, 272, 273, 274, 276, 280, 288, 289, 290, 292, 296, 304, 320, 321, 322, 324, 328, 336, 352, 384, 385, 386, 388, 392, 400, 416, 448, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 524, 528, 529, 530, 532, 536, 544, 545, 546, 548, 552, 560, 576, 577, 578, 580, 584, 592, 608, 640, 641, 642, 644, 648, 656, 672, 704, 768, 769, 770, 772, 776, 784, 800, 832, 896, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1036, 1040, 1041, 1042, 1044, 1048, 1056, 1057, 1058, 1060, 1064, 1072, 1088, 1089, 1090, 1092, 1096, 1104, 1120, 1152, 1153, 1154, 1156, 1160, 1168, 1184, 1216, 1280, 1281, 1282, 1284, 1288, 1296, 1312, 1344, 1408, 1536, 1537, 1538, 1540, 1544, 1552, 1568, 1600, 1664, 1792, 2048, 2049, 2050, 2051, 2052, 2053, 2054, 2056, 2057, 2058, 2060, 2064, 2065, 2066, 2068, 2072, 2080, 2081, 2082, 2084, 2088, 2096, 2112, 2113, 2114, 2116, 2120, 2128, 2144, 2176, 2177, 2178, 2180, 2184, 2192, 2208, 2240, 2304, 2305, 2306, 2308, 2312, 2320, 2336, 2368, 2432, 2560, 2561, 2562, 2564, 2568, 2576, 2592, 2624, 2688, 2816, 3072, 3073, 3074, 3076, 3080, 3088, 3104, 3136, 3200, 3328, 3584, 4096, 4097, 4098, 4099, 4100, 4101, 4102, 4104, 4105, 4106, 4108, 4112, 4113, 4114, 4116, 4120, 4128, 4129, 4130, 4132, 4136, 4144, 4160, 4161, 4162, 4164, 4168, 4176, 4192, 4224, 4225, 4226, 4228, 4232, 4240, 4256, 4288, 4352, 4353, 4354, 4356, 4360, 4368, 4384, 4416, 4480, 4608, 4609, 4610, 4612, 4616, 4624, 4640, 4672, 4736, 4864, 5120, 5121, 5122, 5124, 5128, 5136, 5152, 5184, 5248, 5376, 5632, 6144, 6145, 6146, 6148, 6152, 6160, 6176, 6208, 6272, 6400, 6656, 7168, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8200, 8201, 8202, 8204, 8208, 8209, 8210, 8212, 8216, 8224, 8225, 8226, 8228, 8232, 8240, 8256, 8257, 8258, 8260, 8264, 8272, 8288, 8320, 8321, 8322, 8324, 8328, 8336, 8352, 8384, 8448, 8449, 8450, 8452, 8456, 8464, 8480, 8512, 8576, 8704, 8705, 8706, 8708, 8712, 8720, 8736, 8768, 8832, 8960, 9216, 9217, 9218, 9220, 9224, 9232, 9248, 9280, 9344, 9472, 9728, 10240, 10241, 10242, 10244, 10248, 10256, 10272, 10304, 10368, 10496, 10752, 11264, 12288, 12289, 12290, 12292, 12296, 12304, 12320, 12352, 12416, 12544, 12800, 13312, 14336, 16384, 16385, 16386, 16387, 16388, 16389, 16390, 16392, 16393, 16394, 16396, 16400, 16401, 16402, 16404, 16408, 16416, 16417, 16418, 16420, 16424, 16432, 16448, 16449, 16450, 16452, 16456, 16464, 16480, 16512, 16513, 16514, 16516, 16520, 16528, 16544, 16576, 16640, 16641, 16642, 16644, 16648, 16656, 16672, 16704, 16768, 16896, 16897, 16898, 16900, 16904, 16912, 16928, 16960, 17024, 17152, 17408, 17409, 17410, 17412, 17416, 17424, 17440, 17472, 17536, 17664, 17920, 18432, 18433, 18434, 18436, 18440, 18448, 18464, 18496, 18560, 18688, 18944, 19456, 20480, 20481, 20482, 20484, 20488, 20496, 20512, 20544, 20608, 20736, 20992, 21504, 22528, 24576, 24577, 24578, 24580, 24584, 24592, 24608, 24640, 24704, 24832, 25088, 25600, 26624, 28672, 32768, 32769, 32770, 32771, 32772, 32773, 32774, 32776, 32777, 32778, 32780, 32784, 32785, 32786, 32788, 32792, 32800, 32801, 32802, 32804, 32808, 32816, 32832, 32833, 32834, 32836, 32840, 32848, 32864, 32896, 32897, 32898, 32900, 32904, 32912, 32928, 32960, 33024, 33025, 33026, 33028, 33032, 33040, 33056, 33088, 33152, 33280, 33281, 33282, 33284, 33288, 33296, 33312, 33344, 33408, 33536, 33792, 33793, 33794, 33796, 33800, 33808, 33824, 33856, 33920, 34048, 34304, 34816, 34817, 34818, 34820, 34824, 34832, 34848, 34880, 34944, 35072, 35328, 35840, 36864, 36865, 36866, 36868, 36872, 36880, 36896, 36928, 36992, 37120, 37376, 37888, 38912, 40960, 40961, 40962, 40964, 40968, 40976, 40992, 41024, 41088, 41216, 41472, 41984, 43008, 45056, 49152, 49153, 49154, 49156, 49160, 49168, 49184, 49216, 49280, 49408, 49664, 50176, 51200, 53248, 57344, 65536, 65537, 65538, 65539, 65540, 65541, 65542, 65544, 65545, 65546, 65548, 65552, 65553, 65554, 65556, 65560, 65568, 65569, 65570, 65572, 65576, 65584, 65600, 65601, 65602, 65604, 65608, 65616, 65632, 65664, 65665, 65666, 65668, 65672, 65680, 65696, 65728, 65792, 65793, 65794, 65796, 65800, 65808, 65824, 65856, 65920, 66048, 66049, 66050, 66052, 66056, 66064, 66080, 66112, 66176, 66304, 66560, 66561, 66562, 66564, 66568, 66576, 66592, 66624, 66688, 66816, 67072, 67584, 67585, 67586, 67588, 67592, 67600, 67616, 67648, 67712, 67840, 68096, 68608, 69632, 69633, 69634, 69636, 69640, 69648, 69664, 69696, 69760, 69888, 70144, 70656, 71680, 73728, 73729, 73730, 73732, 73736, 73744, 73760, 73792, 73856, 73984, 74240, 74752, 75776, 77824, 81920, 81921, 81922, 81924, 81928, 81936, 81952, 81984, 82048, 82176, 82432, 82944, 83968, 86016, 90112, 98304, 98305, 98306, 98308, 98312, 98320, 98336, 98368, 98432, 98560, 98816, 99328, 100352, 102400, 106496, 114688, 131072, 131073, 131074, 131075, 131076, 131077, 131078, 131080, 131081, 131082, 131084, 131088, 131089, 131090, 131092, 131096, 131104, 131105, 131106, 131108, 131112, 131120, 131136, 131137, 131138, 131140, 131144, 131152, 131168, 131200, 131201, 131202, 131204, 131208, 131216, 131232, 131264, 131328, 131329, 131330, 131332, 131336, 131344, 131360, 131392, 131456, 131584, 131585, 131586, 131588, 131592, 131600, 131616, 131648, 131712, 131840, 132096, 132097, 132098, 132100, 132104, 132112, 132128, 132160, 132224, 132352, 132608, 133120, 133121, 133122, 133124, 133128, 133136, 133152, 133184, 133248, 133376, 133632, 134144, 135168, 135169, 135170, 135172, 135176, 135184, 135200, 135232, 135296, 135424, 135680, 136192, 137216, 139264, 139265, 139266, 139268, 139272, 139280, 139296, 139328, 139392, 139520, 139776, 140288, 141312, 143360, 147456, 147457, 147458, 147460, 147464, 147472, 147488, 147520, 147584, 147712, 147968, 148480, 149504, 151552, 155648, 163840, 163841, 163842, 163844, 163848, 163856, 163872, 163904, 163968, 164096, 164352, 164864, 165888, 167936, 172032, 180224, 196608, 196609, 196610, 196612, 196616, 196624, 196640, 196672, 196736, 196864, 197120, 197632, 198656, 200704, 204800, 212992, 229376, 262144, 262145, 262146, 262147, 262148, 262149, 262150, 262152, 262153, 262154, 262156, 262160, 262161, 262162, 262164, 262168, 262176, 262177, 262178, 262180, 262184, 262192, 262208, 262209, 262210, 262212, 262216, 262224, 262240, 262272, 262273, 262274, 262276, 262280, 262288, 262304, 262336, 262400, 262401, 262402, 262404, 262408, 262416, 262432, 262464, 262528, 262656, 262657, 262658, 262660, 262664, 262672, 262688, 262720, 262784, 262912, 263168, 263169, 263170, 263172, 263176, 263184, 263200, 263232, 263296, 263424, 263680, 264192, 264193, 264194, 264196, 264200, 264208, 264224, 264256, 264320, 264448, 264704, 265216, 266240, 266241, 266242, 266244, 266248, 266256, 266272, 266304, 266368, 266496, 266752, 267264, 268288, 270336, 270337, 270338, 270340, 270344, 270352, 270368, 270400, 270464, 270592, 270848, 271360, 272384, 274432, 278528, 278529, 278530, 278532, 278536, 278544, 278560, 278592, 278656, 278784, 279040, 279552, 280576, 282624, 286720, 294912, 294913, 294914, 294916, 294920, 294928, 294944, 294976, 295040, 295168, 295424, 295936, 296960, 299008, 303104, 311296, 327680, 327681, 327682, 327684, 327688, 327696, 327712, 327744, 327808, 327936, 328192, 328704, 329728, 331776, 335872, 344064, 360448, 393216, 393217, 393218, 393220, 393224, 393232, 393248, 393280, 393344, 393472, 393728, 394240, 395264, 397312, 401408, 409600, 425984, 458752, 524288, 524289, 524290, 524291, 524292, 524293, 524294, 524296, 524297, 524298, 524300, 524304, 524305, 524306, 524308, 524312, 524320, 524321, 524322, 524324, 524328, 524336, 524352, 524353, 524354, 524356, 524360, 524368, 524384, 524416, 524417, 524418, 524420, 524424, 524432, 524448, 524480, 524544, 524545, 524546, 524548, 524552, 524560, 524576, 524608, 524672, 524800, 524801, 524802, 524804, 524808, 524816, 524832, 524864, 524928, 525056, 525312, 525313, 525314, 525316, 525320, 525328, 525344, 525376, 525440, 525568, 525824, 526336, 526337, 526338, 526340, 526344, 526352, 526368, 526400, 526464, 526592, 526848, 527360, 528384, 528385, 528386, 528388, 528392, 528400, 528416, 528448, 528512, 528640, 528896, 529408, 530432, 532480, 532481, 532482, 532484, 532488, 532496, 532512, 532544, 532608, 532736, 532992, 533504, 534528, 536576, 540672, 540673, 540674, 540676, 540680, 540688, 540704, 540736, 540800, 540928, 541184, 541696, 542720, 544768, 548864, 557056, 557057, 557058, 557060, 557064, 557072, 557088, 557120, 557184, 557312, 557568, 558080, 559104, 561152, 565248, 573440, 589824, 589825, 589826, 589828, 589832, 589840, 589856, 589888, 589952, 590080, 590336, 590848, 591872, 593920, 598016, 606208, 622592, 655360, 655361, 655362, 655364, 655368, 655376, 655392, 655424, 655488, 655616, 655872, 656384, 657408, 659456, 663552, 671744, 688128, 720896, 786432, 786433, 786434, 786436, 786440, 786448, 786464, 786496, 786560, 786688, 786944, 787456, 788480, 790528, 794624, 802816, 819200, 851968, 917504, 1048576, 1048577, 1048578, 1048579, 1048580, 1048581, 1048582, 1048584, 1048585, 1048586, 1048588, 1048592, 1048593, 1048594, 1048596, 1048600, 1048608, 1048609, 1048610, 1048612, 1048616, 1048624, 1048640, 1048641, 1048642, 1048644, 1048648, 1048656, 1048672, 1048704, 1048705, 1048706, 1048708, 1048712, 1048720, 1048736, 1048768, 1048832, 1048833, 1048834, 1048836, 1048840, 1048848, 1048864, 1048896, 1048960, 1049088, 1049089, 1049090, 1049092, 1049096, 1049104, 1049120, 1049152, 1049216, 1049344, 1049600, 1049601, 1049602, 1049604, 1049608, 1049616, 1049632, 1049664, 1049728, 1049856, 1050112, 1050624, 1050625, 1050626, 1050628, 1050632, 1050640, 1050656, 1050688, 1050752, 1050880, 1051136, 1051648, 1052672, 1052673, 1052674, 1052676, 1052680, 1052688, 1052704, 1052736, 1052800, 1052928, 1053184, 1053696, 1054720, 1056768, 1056769, 1056770, 1056772, 1056776, 1056784, 1056800, 1056832, 1056896, 1057024, 1057280, 1057792, 1058816, 1060864, 1064960, 1064961, 1064962, 1064964, 1064968, 1064976, 1064992, 1065024, 1065088, 1065216, 1065472, 1065984, 1067008, 1069056, 1073152, 1081344, 1081345, 1081346, 1081348, 1081352, 1081360, 1081376, 1081408, 1081472, 1081600, 1081856, 1082368, 1083392, 1085440, 1089536, 1097728, 1114112, 1114113, 1114114, 1114116, 1114120, 1114128, 1114144, 1114176, 1114240, 1114368, 1114624, 1115136, 1116160, 1118208, 1122304, 1130496, 1146880, 1179648, 1179649, 1179650, 1179652, 1179656, 1179664, 1179680, 1179712, 1179776, 1179904, 1180160, 1180672, 1181696, 1183744, 1187840, 1196032, 1212416, 1245184, 1310720, 1310721, 1310722, 1310724, 1310728, 1310736, 1310752, 1310784, 1310848, 1310976, 1311232, 1311744, 1312768, 1314816, 1318912, 1327104, 1343488, 1376256, 1441792, 1572864, 1572865, 1572866, 1572868, 1572872, 1572880, 1572896, 1572928, 1572992, 1573120, 1573376, 1573888, 1574912, 1576960, 1581056, 1589248, 1605632, 1638400, 1703936, 1835008, 2097152, 2097153, 2097154, 2097155, 2097156, 2097157, 2097158, 2097160, 2097161, 2097162, 2097164, 2097168, 2097169, 2097170, 2097172, 2097176, 2097184, 2097185, 2097186, 2097188, 2097192, 2097200, 2097216, 2097217, 2097218, 2097220, 2097224, 2097232, 2097248, 2097280, 2097281, 2097282, 2097284, 2097288, 2097296, 2097312, 2097344, 2097408, 2097409, 2097410, 2097412, 2097416, 2097424, 2097440, 2097472, 2097536, 2097664, 2097665, 2097666, 2097668, 2097672, 2097680, 2097696, 2097728, 2097792, 2097920, 2098176, 2098177, 2098178, 2098180, 2098184, 2098192, 2098208, 2098240, 2098304, 2098432, 2098688, 2099200, 2099201, 2099202, 2099204, 2099208, 2099216, 2099232, 2099264, 2099328, 2099456, 2099712, 2100224, 2101248, 2101249, 2101250, 2101252, 2101256, 2101264, 2101280, 2101312, 2101376, 2101504, 2101760, 2102272, 2103296, 2105344, 2105345, 2105346, 2105348, 2105352, 2105360, 2105376, 2105408, 2105472, 2105600, 2105856, 2106368, 2107392, 2109440, 2113536, 2113537, 2113538, 2113540, 2113544, 2113552, 2113568, 2113600, 2113664, 2113792, 2114048, 2114560, 2115584, 2117632, 2121728, 2129920, 2129921, 2129922, 2129924, 2129928, 2129936, 2129952, 2129984, 2130048, 2130176, 2130432, 2130944, 2131968, 2134016, 2138112, 2146304, 2162688, 2162689, 2162690, 2162692, 2162696, 2162704, 2162720, 2162752, 2162816, 2162944, 2163200, 2163712, 2164736, 2166784, 2170880, 2179072, 2195456, 2228224, 2228225, 2228226, 2228228, 2228232, 2228240, 2228256, 2228288, 2228352, 2228480, 2228736, 2229248, 2230272, 2232320, 2236416, 2244608, 2260992, 2293760, 2359296, 2359297, 2359298, 2359300, 2359304, 2359312, 2359328, 2359360, 2359424, 2359552, 2359808, 2360320, 2361344, 2363392, 2367488, 2375680, 2392064, 2424832, 2490368, 2621440, 2621441, 2621442, 2621444, 2621448, 2621456, 2621472, 2621504, 2621568, 2621696, 2621952, 2622464, 2623488, 2625536, 2629632, 2637824, 2654208, 2686976, 2752512, 2883584, 3145728, 3145729, 3145730, 3145732, 3145736, 3145744, 3145760, 3145792, 3145856, 3145984, 3146240, 3146752, 3147776, 3149824, 3153920, 3162112, 3178496, 3211264, 3276800, 3407872, 3670016, 4194304, 4194305, 4194306, 4194307, 4194308, 4194309, 4194310, 4194312, 4194313, 4194314, 4194316, 4194320, 4194321, 4194322, 4194324, 4194328, 4194336, 4194337, 4194338, 4194340, 4194344, 4194352, 4194368, 4194369, 4194370, 4194372, 4194376, 4194384, 4194400, 4194432, 4194433, 4194434, 4194436, 4194440, 4194448, 4194464, 4194496, 4194560, 4194561, 4194562, 4194564, 4194568, 4194576, 4194592, 4194624, 4194688, 4194816, 4194817, 4194818, 4194820, 4194824, 4194832, 4194848, 4194880, 4194944, 4195072, 4195328, 4195329, 4195330, 4195332, 4195336, 4195344, 4195360, 4195392, 4195456, 4195584, 4195840, 4196352, 4196353, 4196354, 4196356, 4196360, 4196368, 4196384, 4196416, 4196480, 4196608, 4196864, 4197376, 4198400, 4198401, 4198402, 4198404, 4198408, 4198416, 4198432, 4198464, 4198528, 4198656, 4198912, 4199424, 4200448, 4202496, 4202497, 4202498, 4202500, 4202504, 4202512, 4202528, 4202560, 4202624, 4202752, 4203008, 4203520, 4204544, 4206592, 4210688, 4210689, 4210690, 4210692, 4210696, 4210704, 4210720, 4210752, 4210816, 4210944, 4211200, 4211712, 4212736, 4214784, 4218880, 4227072, 4227073, 4227074, 4227076, 4227080, 4227088, 4227104, 4227136, 4227200, 4227328, 4227584, 4228096, 4229120, 4231168, 4235264, 4243456, 4259840, 4259841, 4259842, 4259844, 4259848, 4259856, 4259872, 4259904, 4259968, 4260096, 4260352, 4260864, 4261888, 4263936, 4268032, 4276224, 4292608, 4325376, 4325377, 4325378, 4325380, 4325384, 4325392, 4325408, 4325440, 4325504, 4325632, 4325888, 4326400, 4327424, 4329472, 4333568, 4341760, 4358144, 4390912, 4456448, 4456449, 4456450, 4456452, 4456456, 4456464, 4456480, 4456512, 4456576, 4456704, 4456960, 4457472, 4458496, 4460544, 4464640, 4472832, 4489216, 4521984, 4587520, 4718592, 4718593, 4718594, 4718596, 4718600, 4718608, 4718624, 4718656, 4718720, 4718848, 4719104, 4719616, 4720640, 4722688, 4726784, 4734976, 4751360, 4784128, 4849664, 4980736, 5242880, 5242881, 5242882, 5242884, 5242888, 5242896, 5242912, 5242944, 5243008, 5243136, 5243392, 5243904, 5244928, 5246976, 5251072, 5259264, 5275648, 5308416, 5373952, 5505024, 5767168, 6291456, 6291457, 6291458, 6291460, 6291464, 6291472, 6291488, 6291520, 6291584, 6291712, 6291968, 6292480, 6293504, 6295552, 6299648, 6307840, 6324224, 6356992, 6422528, 6553600, 6815744, 7340032, 8388608, 8388609, 8388610, 8388611, 8388612, 8388613, 8388614, 8388616, 8388617, 8388618, 8388620, 8388624, 8388625, 8388626, 8388628, 8388632, 8388640, 8388641, 8388642, 8388644, 8388648, 8388656, 8388672, 8388673, 8388674, 8388676, 8388680, 8388688, 8388704, 8388736, 8388737, 8388738, 8388740, 8388744, 8388752, 8388768, 8388800, 8388864, 8388865, 8388866, 8388868, 8388872, 8388880, 8388896, 8388928, 8388992, 8389120, 8389121, 8389122, 8389124, 8389128, 8389136, 8389152, 8389184, 8389248, 8389376, 8389632, 8389633, 8389634, 8389636, 8389640, 8389648, 8389664, 8389696, 8389760, 8389888, 8390144, 8390656, 8390657, 8390658, 8390660, 8390664, 8390672, 8390688, 8390720, 8390784, 8390912, 8391168, 8391680, 8392704, 8392705, 8392706, 8392708, 8392712, 8392720, 8392736, 8392768, 8392832, 8392960, 8393216, 8393728, 8394752, 8396800, 8396801, 8396802, 8396804, 8396808, 8396816, 8396832, 8396864, 8396928, 8397056, 8397312, 8397824, 8398848, 8400896, 8404992, 8404993, 8404994, 8404996, 8405000, 8405008, 8405024, 8405056, 8405120, 8405248, 8405504, 8406016, 8407040, 8409088, 8413184, 8421376, 8421377, 8421378, 8421380, 8421384, 8421392, 8421408, 8421440, 8421504, 8421632, 8421888, 8422400, 8423424, 8425472, 8429568, 8437760, 8454144, 8454145, 8454146, 8454148, 8454152, 8454160, 8454176, 8454208, 8454272, 8454400, 8454656, 8455168, 8456192, 8458240, 8462336, 8470528, 8486912, 8519680, 8519681, 8519682, 8519684, 8519688, 8519696, 8519712, 8519744, 8519808, 8519936, 8520192, 8520704, 8521728, 8523776, 8527872, 8536064, 8552448, 8585216, 8650752, 8650753, 8650754, 8650756, 8650760, 8650768, 8650784, 8650816, 8650880, 8651008, 8651264, 8651776, 8652800, 8654848, 8658944, 8667136, 8683520, 8716288, 8781824, 8912896, 8912897, 8912898, 8912900, 8912904, 8912912, 8912928, 8912960, 8913024, 8913152, 8913408, 8913920, 8914944, 8916992, 8921088, 8929280, 8945664, 8978432, 9043968, 9175040, 9437184, 9437185, 9437186, 9437188, 9437192, 9437200, 9437216, 9437248, 9437312, 9437440, 9437696, 9438208, 9439232, 9441280, 9445376, 9453568, 9469952, 9502720, 9568256, 9699328, 9961472, 10485760, 10485761, 10485762, 10485764, 10485768, 10485776, 10485792, 10485824, 10485888, 10486016, 10486272, 10486784, 10487808, 10489856, 10493952, 10502144, 10518528, 10551296, 10616832, 10747904, 11010048, 11534336, 12582912, 12582913, 12582914, 12582916, 12582920, 12582928, 12582944, 12582976, 12583040, 12583168, 12583424, 12583936, 12584960, 12587008, 12591104, 12599296, 12615680, 12648448, 12713984, 12845056, 13107200, 13631488, 14680064};
}
